@page "/approved-email-demo"
@using WordPressPCL
@using System.Net.Http.Json
@using System.Text.Json
@inject IWordPressApiService Api
@inject IStringLocalizer<ApprovedEmailDemo> L

<PageTitle>@L["Title"]</PageTitle>

<h1>@L["Heading"]</h1>

@if (client == null)
{
    <p>@L["NoEndpointStart"] <NavLink href="/">@L["HomeLink"]</NavLink>@L["NoEndpointEnd"]</p>
}
else
{
    <div class="mb-3 d-flex gap-2">
        <input class="form-control" placeholder="@L["EmailPlaceholder"]" @bind="newEmail" />
        <button class="btn btn-primary" @onclick="AddEmailAsync">@L["AddButton"]</button>
    </div>
    @if (!string.IsNullOrEmpty(status))
    {
        <p>@status</p>
    }
    @if (emails == null)
    {
        <p><em>@L["Loading"]</em></p>
    }
    else if (emails.Count == 0)
    {
        <p>@L["NoEmails"]</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>@L["EmailColumn"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in emails)
                {
                    <tr>
                        <td>@e</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveEmailAsync(e)">@L["RemoveButton"]</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private WordPressClient? client;
    private HttpClient? httpClient;
    private List<string>? emails;
    private string newEmail = string.Empty;
    private string? status;

    protected override async Task OnInitializedAsync()
    {
        var wp = await Api.GetClientAsync();
        if (wp == null || Api.HttpClient == null)
        {
            return;
        }
        client = wp;
        httpClient = Api.HttpClient;
        await LoadEmailsAsync();
    }

    private async Task LoadEmailsAsync()
    {
        if (httpClient == null) return;
        try
        {
            var list = await httpClient.GetFromJsonAsync<List<string>>("approved-email-list/v1/approved-emails");
            emails = list ?? new();
        }
        catch (Exception ex)
        {
            status = string.Format(L["ErrorMessage"].Value, ex.Message);
            emails = new();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddEmailAsync()
    {
        if (httpClient == null || string.IsNullOrWhiteSpace(newEmail)) return;
        status = null;
        try
        {
            var resp = await httpClient.PostAsJsonAsync("approved-email-list/v1/approved-emails", new { email = newEmail });
            resp.EnsureSuccessStatusCode();
            newEmail = string.Empty;
            await LoadEmailsAsync();
        }
        catch (Exception ex)
        {
            status = string.Format(L["ErrorMessage"].Value, ex.Message);
        }
    }

    private async Task RemoveEmailAsync(string email)
    {
        if (httpClient == null) return;
        status = null;
        try
        {
            var resp = await httpClient.DeleteAsync($"approved-email-list/v1/approved-emails/{Uri.EscapeDataString(email)}");
            resp.EnsureSuccessStatusCode();
            await LoadEmailsAsync();
        }
        catch (Exception ex)
        {
            status = string.Format(L["ErrorMessage"].Value, ex.Message);
        }
    }
}
