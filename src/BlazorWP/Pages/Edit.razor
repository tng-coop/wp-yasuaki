@page "/edit"
@page "/edit/{Id:int}"
@layout FullPageLayout
@inject BlazorWP.Data.AppFlags Flags
@using TinyMCE.Blazor
@inject IJSRuntime JS


<RadzenSplitter>
    <RadzenSplitterPane Size="30%" Min="100px">
        <RadzenSplitterPane Size="30%" Min="100px">
            <EditList SelectedId="Id" />
        </RadzenSplitterPane>

    </RadzenSplitterPane>
    <RadzenSplitterPane>
        <EditNew Id="Id" OnNewPage="NewPageAsync" />
        <div class="mb-3 d-flex align-items-center">
            <label class="form-label me-2 mb-0 text-nowrap">Title</label>
            <input class="form-control flex-grow-1 min-w-0" value="@Title" @oninput="HandleTitleInput" />

        </div>
        <div id="editorHost" class="editor-host">
            <Editor Id="articleEditor" ScriptSrc="libman/tinymce/tinymce.min.js" LicenseKey="gpl"
                JsConfSrc="myTinyMceConfig" @bind-Value="Content" />
        </div>

        <EditSave isDirty="_isDirty" Saving="_saving" Status="_status" OnSave="SaveAsync" OnFork="ForkAsync"
            CanFork="@(Id is int)" Forking="_forking" />
    </RadzenSplitterPane>
</RadzenSplitter>
<MediaPopup @ref="_mediaPopup" />

@code {
    private MediaPopup _mediaPopup = default!;

    private string? _originalTitle;
    private CancellationTokenSource? _cts;

    protected override void OnInitialized() => _originalTitle = Title;

    private async Task HandleTitleInput(ChangeEventArgs e)
    {
        _cts?.Cancel();
        _cts = new();

        var next = e.Value?.ToString();

        try
        {
            await Task.Delay(300, _cts.Token); // debounce
            Title = next;
            _isDirty = Title != _originalTitle;
            await JS.InvokeVoidAsync("BlazorBridge.setDirty", "articleEditor", _isDirty);
            StateHasChanged();
        }
        catch (TaskCanceledException) { /* ignore */ }
    }
}