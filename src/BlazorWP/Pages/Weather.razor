@page "/weather"
@inject HttpClient Http
@inject IStringLocalizer<Weather> L

<PageTitle>@L["Title"]</PageTitle>

<h1>@L["Heading"]</h1>

<p>@L["Description"]</p>

@if (forecasts == null)
{
    <p><em>@L["Loading"]</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["ColumnDate"]</th>
                <th aria-label='@L["ColumnCelsiusAria"]'>@L["ColumnCelsius"]</th>
                <th aria-label='@L["ColumnFahrenheitAria"]'>@L["ColumnFahrenheit"]</th>
                <th>@L["ColumnSummary"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
