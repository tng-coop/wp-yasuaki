@page "/data-storage"
@inject LocalStorageJsInterop StorageJs
@inject IStringLocalizer<DataStorage> L

<PageTitle>@L["Title"]</PageTitle>

<h1>@L["Heading"]</h1>

<p>@((MarkupString)L["Description"].Value)</p>

@if (items == null)
{
    <p><em>@L["Loading"]</em></p>
}
else if (items.Count == 0)
{
    <p>@L["NoData"]</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["KeyHeader"]</th>
                <th>@L["ValueHeader"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Key</td>
                    <td class="text-break">@item.Value</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item.Key)">@L["DeleteButton"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<StoredItem>? items;

    protected override async Task OnInitializedAsync()
    {
        items = new();
        var keys = await StorageJs.KeysAsync();
        foreach (var key in keys)
        {
            var info = await StorageJs.ItemInfoAsync(key);
            items.Add(new StoredItem
            {
                Key = key,
                Value = info.Value
            });
        }
    }

    private async Task DeleteItem(string key)
    {
        if (items != null)
        {
            items.RemoveAll(i => i.Key == key);
        }
        await StorageJs.DeleteAsync(key);
        await InvokeAsync(StateHasChanged);
    }

    private class StoredItem
    {
        public string Key { get; set; } = string.Empty;
        public string? Value { get; set; }
    }
}


