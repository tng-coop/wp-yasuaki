@page "/test-memory"
@inject BlazorWP.Data.ILocalStore LocalStore

<h3>Test Local Memory (Harness)</h3>

<input id="title" data-testid="title-input" @bind="title" />

<button id="add" data-testid="btn-add" @onclick="Add">Add</button>
<button id="put" data-testid="btn-put" @onclick="Put">Put</button>
<button id="get" data-testid="btn-get" @onclick="GetById">GetById</button>
<button id="list" data-testid="btn-list" @onclick="ListAll">List</button>
<button id="delete" data-testid="btn-delete" @onclick="Delete">Delete</button>

<!-- NEW: single button that triggers two concurrent adds with distinct payloads -->
<button id="add-race" data-testid="btn-add-race" @onclick="AddRaceCombined">Add Race</button>

<p id="status" data-testid="status" role="status" aria-live="polite">@status</p>

<ul id="drafts" data-testid="draft-list">
  @foreach (var draft in drafts)
  {
    <li data-testid="draft-item">
      <span data-testid="draft-id">@draft.id</span>
      <span data-testid="draft-title">@draft.Title</span>
    </li>
  }
</ul>

@code {
    private const string STORE = "kv";  // generic KV store (id is string)
    private string title = "";
    private string status = "";
    private List<Draft> drafts = new();

    // KV contract: primary key field is lowercase "id" and is a string
    private class Draft
    {
        public string id { get; set; } = "";
        public string Title { get; set; } = "";
    }

    private async Task Add()
    {
        var key = $"draft:{Guid.NewGuid():N}";
        await LocalStore.PutAsync(STORE, new Draft { id = key, Title = title }); // upsert acts as insert
        status = $"Added {key}";
    }

    private async Task Put()
    {
        const string key = "draft:1";
        await LocalStore.PutAsync(STORE, new Draft { id = key, Title = title }); // upsert fixed id
        status = "Put/Upserted!";
    }

    private async Task GetById()
    {
        const string key = "draft:1";
        var result = await LocalStore.GetByKeyAsync<Draft>(STORE, key);
        status = result?.Title ?? "Not found";
    }

    private async Task ListAll()
    {
        drafts = (await LocalStore.GetAllAsync<Draft>(STORE)).ToList();
        status = $"Listed {drafts.Count} items";
    }

    private async Task Delete()
    {
        const string key = "draft:1";
        await LocalStore.DeleteAsync(STORE, key);
        status = "Deleted!";
    }

    // --- NEW: deterministic internal "race" ---

    private async Task AddRaceCombined()
    {
        // Fire two concurrent writes with distinct payloads.
        // Small stagger to encourage interleaving; ordering is irrelevant.
        var t1 = AddWithPayloadAsync("Quick Alpha", 30);
        var t2 = AddWithPayloadAsync("Quick Beta",  0);
        await Task.WhenAll(t1, t2);
    }

    private async Task AddWithPayloadAsync(string payloadTitle, int delayMs)
    {
        if (delayMs > 0)
            await Task.Delay(delayMs);

        var key = $"draft:{Guid.NewGuid():N}";
        await LocalStore.PutAsync(STORE, new Draft { id = key, Title = payloadTitle });
        status = $"Added {key}";
    }
}
