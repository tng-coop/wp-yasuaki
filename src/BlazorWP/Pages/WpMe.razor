@page "/wp-me"
@using Editor.WordPress
@inject IWordPressApiService Api
@inject IConfiguration Config
@inject IStringLocalizer<WpMe> L

<PageTitle>@L["Title"]</PageTitle>

<h1>@L["Heading"]</h1>

@if (loading)
{
  <p><em>@L["Loading"]</em></p>
}
else if (!string.IsNullOrEmpty(error))
{
  <div data-testid="wp-me-error" class="text-danger">@error</div>
}
else if (meId is not null)
{
  <div data-testid="wp-me-ok">
    <div><strong>@L["IdLabel"]</strong> @meId</div>
    <div><strong>@L["NameLabel"]</strong> @meName</div>
  </div>
}
else
{
  <p>@L["NoData"]</p>
}

@code {
  private bool loading = true;
  private string? error;
  private long? meId;
  private string? meName;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var client = await Api.GetClientAsync(); // uses wpurl app flag
      if (client is null)
      {
        error = L["NoEndpointConfigured"].Value;
        return;
      }

      var me = await client.Users.GetCurrentUserAsync();
      meId = me?.Id;
      meName = me?.Name;
    }
    catch (Exception ex)
    {
      error = string.Format(L["UnexpectedError"].Value, ex.Message);
    }
    finally
    {
      loading = false;
    }
  }
}
