name: WP Ultra Simple CI (clean slate, no --force)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  wp:
    runs-on: ubuntu-latest

    # 1) Database runs as a GitHub Actions service container (isolated per run).
    services:
      db:
        image: mariadb:11
        env:
          MARIADB_DATABASE: wordpress         # schema created by entrypoint
          MARIADB_USER: wp                    # non-root app user
          MARIADB_PASSWORD: wp                # app user password
          MARIADB_ROOT_PASSWORD: root         # root password (used by entrypoint only)
        ports:
          - 3306:3306                         # expose to the job VM
        # (No healthcheck here; we do an explicit readiness wait below.)

    steps:
      # 2) Fetch your repository (not strictly needed for this demo, but standard).
      - uses: actions/checkout@v4

      # 3) Install PHP 8.3 + extensions WP needs (runs only in this ephemeral VM).
      - name: Install PHP 8.3 + extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mysqli, curl, mbstring, xml, zip, gd

      # 4) Install WP-CLI in PATH (always; runner is brand-new each run).
      - name: Install WP-CLI
        run: |
          sudo wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          sudo chmod +x /usr/local/bin/wp
          wp --info

      # 5) Ensure a clean working directory for WordPress (no --force; we explicitly remove then create).
      - name: Prepare clean workspace
        run: |
          rm -rf wordpress
          mkdir -p wordpress

      # 6) Download WordPress core into ./wordpress (fresh folder; no overwrite flags needed).
      - name: Download WordPress
        run: |
          wp core download --path=wordpress

      # 7) Wait until DB actually accepts connections
      - name: Wait for database readiness
        run: |
          for i in {1..90}; do
            mysqladmin ping -h127.0.0.1 -uwp -pwp --silent && exit 0
            sleep 2
          done
          echo "Database did not become ready in time." >&2
          exit 1

      # 8) Create wp-config.php (safe now, DB is alive)
      - name: Create wp-config.php
        run: |
          wp config create --path=wordpress \
            --dbname=wordpress --dbuser=wp --dbpass=wp --dbhost=127.0.0.1

      # 9) Install WordPress (fresh DB; this is the first/only install this run).
      - name: Install WordPress
        run: |
          wp core install --path=wordpress \
            --url="http://127.0.0.1:8081" \
            --title="CI Test Site" \
            --admin_user=admin \
            --admin_password=ChangeMe! \
            --admin_email=admin@example.com

      # 10) Start the built-in PHP server to serve the site (no Apache/nginx).
         #     We use a tiny router so non-existent paths fall through to index.php like mod_rewrite.
      - name: Start PHP development server
        run: |
          cat > router.php <<'PHP'
          <?php
          $root = __DIR__.'/wordpress';
          $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
          if ($path !== '/' && file_exists($root.$path)) { return false; }
          chdir($root);
          require $root.'/index.php';
          PHP
          nohup php -S 127.0.0.1:8081 router.php >/dev/null 2>&1 &

      # 11) Create a dedicated CI author and issue an Application Password (used for REST auth).
      - name: Create CI author + Application Password
        id: app
        run: |
          wp user create ci-poster ci-poster@example.com --role=author --user_pass="$(openssl rand -base64 18)" --path=wordpress
          APP=$(wp user application-password create ci-poster gha --porcelain --path=wordpress)
          echo "wp_base_url=http://127.0.0.1:8081" >> "$GITHUB_OUTPUT"
          echo "wp_user=ci-poster" >> "$GITHUB_OUTPUT"
          echo "wp_app_password=$APP" >> "$GITHUB_OUTPUT"

      # üîç Step 12: Diagnostics before REST smoke test
      - name: Diagnostics (dump WP state)
        run: |
          echo "=== PHP version ==="
          php -v

          echo "=== WP version ==="
          wp core version --path=wordpress

          echo "=== Users ==="
          wp user list --path=wordpress --fields=ID,user_login,user_email,roles

          echo "=== Active theme ==="
          wp theme list --path=wordpress --status=active

          echo "=== Plugins ==="
          wp plugin list --path=wordpress || true

          echo "=== DB check ==="
          wp db check --path=wordpress

          echo "=== Site root (curl) ==="
          curl -s -I http://127.0.0.1:8081/ | head -n 20

          echo "=== REST index ==="
          curl -s http://127.0.0.1:8081/wp-json/ | jq .

      - name: REST smoke test
        env:
          WP_BASE_URL: ${{ steps.app.outputs.wp_base_url }}
          WP_USER: ${{ steps.app.outputs.wp_user }}
          WP_APP_PASSWORD: ${{ steps.app.outputs.wp_app_password }}
        run: |
          curl -f -sS -X POST "$WP_BASE_URL/wp-json/wp/v2/posts" \
            -u "$WP_USER:$WP_APP_PASSWORD" \
            -H "Content-Type: application/json" \
            -d '{"title":"Hello from CI","status":"publish","content":"<p>It works üéâ</p>"}' \
          | jq .