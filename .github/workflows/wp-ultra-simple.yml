name: WP Ultra Simple CI (clean slate, no --force)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  wp:
    runs-on: ubuntu-latest
    env:
      WP_PATH: wordpress
      WP_BASE_URL: https://wp.lan
      ADMIN_USER: admin
      ADMIN_PASS: a
      ADMIN_EMAIL: admin@example.com
      
    services:
      db:
        image: mariadb:11
        env:
          MARIADB_DATABASE: wordpress
          MARIADB_USER: wp
          MARIADB_PASSWORD: wp
          MARIADB_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mariadb-admin ping -h 127.0.0.1 --protocol=tcp -uroot -proot --connect-timeout=2 --silent"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=60
          --health-start-period=40s

      mailhog:
        image: mailhog/mailhog:v1.0.1
        ports:
          - 1025:1025   # SMTP
          - 8025:8025   # Web/API
        options: >-
          --health-cmd="wget -qO- http://127.0.0.1:8025/api/v2/messages >/dev/null || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=60
          --health-start-period=5s

    steps:
      - uses: actions/checkout@v4

      - name: Install PHP 8.3 + extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mysqli, curl, mbstring, xml, zip, gd

      - name: Install WP-CLI
        run: |
          sudo wget -qO /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          sudo chmod +x /usr/local/bin/wp
          wp --info

      - name: Install tools (jq, pip, NSS/CA utils)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq libnss3-tools ca-certificates python3-pip
          pip3 install --user requests

      - name: Create workspace
        run: mkdir -p wordpress

      - name: Download WordPress
        run: wp core download --path=wordpress

      - name: Wait for database readiness (runner-side)
        run: |
          for i in {1..180}; do
            mysqladmin ping -h127.0.0.1 -uwp -pwp --protocol=tcp --silent && exit 0
            sleep 2
          done
          echo "Database did not become ready in time." >&2
          exit 1

      - name: Create wp-config.php
        run: |
          wp config create --path=wordpress \
            --dbname=wordpress --dbuser=wp --dbpass=wp --dbhost=127.0.0.1

      - name: Enable WP debug (log to file, no HTML fatals)
        run: |
          wp config set WP_DEBUG true --path=wordpress --type=constant --raw
          wp config set WP_DEBUG_LOG true --path=wordpress --type=constant --raw
          wp config set WP_DEBUG_DISPLAY false --path=wordpress --type=constant --raw
          wp config set WP_DISABLE_FATAL_ERROR_HANDLER true --path=wordpress --type=constant --raw

      - name: Reset + Install WordPress
        id: reset
        run: bash scripts/reset-wp.sh
        # scripts/reset-wp.sh should write:
        #   echo "WP_APP_PASSWORD=$WP_APP_PASSWORD" >> "$GITHUB_OUTPUT"


      - name: Export WP vars to env (and validate)
        run: |
          ADMIN_APP='${{ steps.reset.outputs.WP_APP_PASSWORD }}'
          if [ -z "$ADMIN_APP" ]; then
            echo "❌ ERROR: WP_APP_PASSWORD was empty"
            exit 1
          fi
          echo "::add-mask::$ADMIN_APP"
          {
            echo "WP_APP_PASSWORD=$ADMIN_APP"
            echo "WP_USERNAME=${{ env.ADMIN_USER }}"
            echo "WP_BASE_URL=${{ env.WP_BASE_URL }}"
          } >> "$GITHUB_ENV"

      - name: Materialize plugins and mu-plugins (no symlinks)
        shell: bash
        run: |
          set -euxo pipefail
          WP_CONTENT_DIR="${GITHUB_WORKSPACE}/wordpress/wp-content"
          mkdir -p "$WP_CONTENT_DIR/plugins" "$WP_CONTENT_DIR/mu-plugins"

          # Copy normal plugins from repo → wp-content/plugins
          if compgen -G "$GITHUB_WORKSPACE/wp/plugins/*" > /dev/null; then
            rsync -a --delete "$GITHUB_WORKSPACE/wp/plugins/" "$WP_CONTENT_DIR/plugins/"
          fi

          # Copy MU-plugins (flat .php files) from repo → wp-content/mu-plugins
          if compgen -G "$GITHUB_WORKSPACE/wp/wp-content/mu-plugins/*.php" > /dev/null; then
            rsync -a --delete "$GITHUB_WORKSPACE/wp/wp-content/mu-plugins/" "$WP_CONTENT_DIR/mu-plugins/"
          fi

          echo "=== wp-content after copy ==="
          ls -l "$WP_CONTENT_DIR/plugins" || true
          ls -l "$WP_CONTENT_DIR/mu-plugins" || true

      - name: Map dev hostnames to loopback
        run: |
          echo "127.0.0.1 aspnet.lan wp.lan" | sudo tee -a /etc/hosts

      - name: Export Office CPT rest base
        run: echo "WP_REST_BASE_OFFICE=office-cpt" >> "$GITHUB_ENV"


      - name: WP REST sanity (CLI, bypass HTTP)
        run: |
          echo "=== REST status via WP-CLI ==="
          wp eval '
            $r = rest_do_request( new WP_REST_Request("GET","/") );
            echo "status=" . $r->get_status() . PHP_EOL;
            if ($r->is_error()) { $e = $r->as_error(); echo $e->get_error_message() . PHP_EOL; }
          ' --path=wordpress

      - name: Diagnostics (dump WP state)
        run: |
          set -e
          echo "=== PHP version ==="; php -v
          echo "=== WP version ==="; wp core version --path=wordpress
          echo "=== Users ==="; wp user list --path=wordpress --fields=ID,user_login,user_email,roles
          echo "=== Active theme ==="; wp theme list --path=wordpress --status=active
          echo "=== Plugins ==="; wp plugin list --path=wordpress || true
          echo "=== DB check ==="; wp db check --path=wordpress

      - name: Generate CA and certs
        shell: bash
        run: |
          set -euxo pipefail
          chmod +x scripts/generate-ca-and-certs.sh
          bash scripts/generate-ca-and-certs.sh
          echo "--- Generated cert artifacts (cert) ---"
          ls -la cert || true
          echo "--- Shared publish dir (/srv/shared/aspnet/cert) ---"
          sudo ls -la /srv/shared/aspnet/cert || true

      - name: Setup Apache (direct, no proxy) for WordPress
        shell: bash
        env:
          DOMAIN: aspnet.lan
          DOMAIN_ALIASES: wp.lan
          PORT: '443'
          WP_DIR: ${{ github.workspace }}/wordpress
          CERT_DIR: ${{ github.workspace }}/cert
        run: scripts/setup-apache-direct.sh

      - name: HTTPS smoke test (Apache TLS → WordPress)
        run: |
          set -euxo pipefail
          curl -I https://aspnet.lan/
          curl -I https://wp.lan:443/
          curl -fsS https://aspnet.lan/ -o /tmp/index.html
          head -n 20 /tmp/index.html

      - name: Verify REST pretty route works
        run: |
          set -euxo pipefail
          curl -fsSI https://aspnet.lan/wp-json/
          curl -fsSI https://wp.lan:443/wp-json/
          curl -fsS  https://aspnet.lan/wp-json/wp/v2 | jq '.namespace'

      - name: Verify Office CPT is registered (fail fast)
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
        run: |
          set -e
          # Ensure the CPT type doc exists and has the expected rest_base
          curl -fsS "$WP_BASE_URL/wp-json/wp/v2/types/office-cpt" | jq -re '.rest_base=="office-cpt"' >/dev/null


      - name: Upload cert artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aspnet-dev-certs
          path: |
            cert/**
          if-no-files-found: warn
          retention-days: 7

      - name: REST smoke test (create a post, non-pretty route)
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WP_USER: ${{ env.WP_USER }}
          WP_APP_PASSWORD: ${{ env.WP_APP_PASSWORD }}
        run: |
          set -e
          curl -fsS -X POST "$WP_BASE_URL/index.php?rest_route=/wp/v2/posts" \
            -u "$WP_USER:$WP_APP_PASSWORD" \
            -H "Content-Type: application/json" \
            -d '{"title":"Hello from CI","status":"publish","content":"<p>It works 🎉</p>"}' \
          | jq .

      - name: REST sanity checks
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WP_USER: ${{ env.WP_USER }}
          WP_APP_PASSWORD: ${{ env.WP_APP_PASSWORD }}
        run: scripts/check-wp-rest.sh

      # ---------------- MailHog tests: call your scripts from ./scripts ----------------
      - name: Export MailHog env for scripts
        run: |
          {
            echo "MH_HOST=127.0.0.1"
            echo "MH_SMTP_PORT=1025"
            echo "MH_HTTP_PORT=8025"
            echo "MAIL_TO=inbox@example.test"
            echo "MAIL_FROM=wp-test@local.test"
            echo "WAIT_SECS=25"
          } >> "$GITHUB_ENV"

      - name: Ensure script perms + WP path symlink for scripts
        run: |
          chmod +x scripts/test_mailhog.py || true
          chmod +x scripts/test_wp_mail.py || true
          chmod +x scripts/mailhog-test.php || true
          sudo mkdir -p /var/www/html
          # many of your scripts expect /var/www/html/wordpress
          sudo ln -s "${GITHUB_WORKSPACE}/wordpress" /var/www/html/wordpress

      - name: SMTP smoke test → MailHog (Python)
        env:
          MH_HOST: 127.0.0.1
          MH_SMTP_PORT: 1025
          MH_HTTP_PORT: 8025
          MAIL_FROM: wp-test@local.test
          MAIL_TO: inbox@example.test
          WAIT_SECS: 25
          CLEAR_FIRST: "true"
        run: scripts/test_mailhog.py

      - name: WordPress → MailHog (PHP wp_mail test + verify)
        env:
          MH_HOST: 127.0.0.1
          MH_SMTP_PORT: 1025
          MH_HTTP_PORT: 8025
          MAIL_FROM: wp-test@local.test
          MAIL_TO: inbox@example.test
          WAIT_SECS: 25
        run: scripts/mailhog-test.php

      - name: Provide sendmail via msmtp (match local)
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y msmtp msmtp-mta

          # Configure msmtp to relay to MailHog (no TLS, local SMTP)
          sudo tee /etc/msmtprc >/dev/null <<'EOF'
          defaults
          tls off
          account default
          host 127.0.0.1
          port 1025
          # optional niceties:
          # auto_from on
          # maildomain local.test
          EOF
          sudo chmod 600 /etc/msmtprc

          # Sanity checks (should match your local box)
          ls -l /usr/sbin/sendmail || true
          php -i | grep -E '^sendmail_path|^SMTP '

      - name: WordPress → MailHog (WP-CLI + verify via API)
        env:
          MH_HTTP_PORT: 8025
        run: scripts/test_wp_mail.py

      # ---------------- .NET & Playwright (unchanged) ----------------
      - name: Prepare dotnet install dir (user-local)
        run: |
          echo "DOTNET_INSTALL_DIR=$HOME/.dotnet" >> "$GITHUB_ENV"
          echo "DOTNET_ROOT=" >> "$GITHUB_ENV"

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Verify dotnet
        run: dotnet --info

      - name: Make gen-appsettings.sh executable
        run: chmod +x scripts/gen-appsettings.sh

      - name: Generate appsettings (plain files)
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
        run: |
          set -euxo pipefail
          bash -x ./scripts/gen-appsettings.sh

      - name: Postflight FS check (after gen-appsettings)
        if: always()
        run: |
          set -euxo pipefail
          echo "--- BlazorWP root ---"
          ls -la BlazorWP || true
          echo "--- wwwroot ---"
          ls -la BlazorWP/wwwroot || true
          echo "--- appsettings.json ---"
          sed -n '1,120p' BlazorWP/wwwroot/appsettings.json || true
          echo "--- appsettings.Development.json ---"
          sed -n '1,120p' BlazorWP/appsettings.Development.json || true
          echo "--- PHP debug.log (if any) ---"
          tail -n +1 wordpress/wp-content/debug.log || true

      - name: Restore
        run: dotnet restore Workspace.sln

      - name: Build (Release)
        run: dotnet build Workspace.sln -c Release --no-restore

      - name: Run all tests (Workspace.sln)
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WordPress__Url: ${{ env.WP_BASE_URL }}
          WP_USER: ${{ env.WP_USERNAME }}
          WP_USERNAME: ${{ env.WP_USERNAME }}
          WP_APP_PASSWORD: ${{ env.WP_APP_PASSWORD }}
          DOTNET_ENVIRONMENT: Development
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
        run: dotnet test Workspace.sln -c Release --no-build --no-restore -m:1

      - name: Run E2E/Integration tests (if any)
        if: ${{ hashFiles('BlazorWP.E2E/*.csproj') != '' }}
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WordPress__Url: ${{ env.WP_BASE_URL }}
          WP_USER: ${{ env.WP_USERNAME }}
          WP_USERNAME: ${{ env.WP_USERNAME }}
          WP_APP_PASSWORD: ${{ env.WP_APP_PASSWORD }}
          DOTNET_ENVIRONMENT: Development
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
        run: dotnet test BlazorWP.E2E/BlazorWP.E2E.csproj -c Release --no-build --no-restore --logger "trx;LogFileName=e2e.trx"

      - name: Deploy Blazor App to WordPress (e2e-deploy)
        shell: bash
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          TARGET_DIR: /var/www/wordpress/blazorapp
        run: |
          set -euxo pipefail
          chmod +x scripts/e2e-deploy.sh
          bash scripts/e2e-deploy.sh

      # ---------------- Playwright E2E (Chromium only) ----------------
      - name: Setup Node (for Playwright)
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install npm deps (e2e/)
        working-directory: e2e
        run: npm ci

      # Install only Chromium system deps (run inside e2e so Playwright sees package.json)
      - name: Install Playwright Chromium deps
        working-directory: e2e
        run: npx playwright install-deps chromium

      # Download only Chromium browser (again inside e2e/)
      - name: Install Playwright Chromium
        working-directory: e2e
        run: npx playwright install chromium

      # Run only the Chromium project
      - name: Run Playwright tests (Chromium only)
        working-directory: e2e
        env:
          BLAZOR_BASE_URL: ${{ env.WP_BASE_URL }}/blazorapp/
          WP_USER: ${{ env.WP_USER }}
          WP_APP_PASSWORD: ${{ env.WP_APP_PASSWORD }}
          CI: "1"
        run: npx playwright test --project=chromium

      - name: Upload Playwright report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30
