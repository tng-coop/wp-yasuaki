@inherits LayoutComponentBase

@implements IDisposable
@implements IAsyncDisposable
@using BlazorWP.Data
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (!string.IsNullOrEmpty(currentEndpoint))
            {
                <span>@currentEndpoint</span>
            }
            @if (!string.IsNullOrEmpty(currentUsername))
            {
                <span class="ms-2">@currentUsername</span>
            }
            @if (showLoginFirst)
            {
                <span class="ms-2">PLEASE LOG IN FIRST</span>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [Inject]
    private LocalStorageJsInterop StorageJs { get; set; } = default!;
    [Inject]
    private WpEndpointSyncJsInterop EndpointSyncJs { get; set; } = default!;
    [Inject]
    private IConfiguration Config { get; set; } = default!;
    [Inject]
    private NavigationManager NavManager { get; set; } = default!;
    [Inject]
    private INonceService NonceService { get; set; } = default!;

    private string? currentEndpoint;
    private string? currentUsername;
    private DotNetObjectReference<object>? _objRef;
    private bool showLoginFirst;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var endpoint = await StorageJs.GetItemAsync("wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            var configEndpoint = Config["WordPress:Url"];
            if (!string.IsNullOrEmpty(configEndpoint))
            {
                endpoint = configEndpoint;
                await StorageJs.SetItemAsync("wpEndpoint", endpoint);
            }
        }
        string? username = null;
        if (!string.IsNullOrEmpty(endpoint))
        {
            username = await GetUsernameAsync(endpoint);
        }
        var changed = false;
        if (endpoint != currentEndpoint)
        {
            currentEndpoint = endpoint;
            changed = true;
        }
        if (username != currentUsername)
        {
            currentUsername = username;
            changed = true;
        }
        var uri = new Uri(NavManager.Uri);
        var query = uri.Query.TrimStart('?');
        var parts = query.Split('&', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var loginMsg = false;
        if (parts.Any(p => p.Equals("nonce", StringComparison.OrdinalIgnoreCase)))
        {
            var nonce = await NonceService.GetNonceAsync();
            loginMsg = string.IsNullOrEmpty(nonce);
        }
        if (loginMsg != showLoginFirst)
        {
            showLoginFirst = loginMsg;
            changed = true;
        }

        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create<object>(this);
            await EndpointSyncJs.RegisterAsync(_objRef);
            // nonce fetched automatically when requests are made
        }

        if (changed)
        {
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void UpdateEndpoint(string? endpoint)
    {
        if (endpoint != currentEndpoint)
        {
            currentEndpoint = endpoint;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task<string?> GetUsernameAsync(string endpoint)
    {
        var json = await StorageJs.GetItemAsync("siteinfo");
        if (string.IsNullOrEmpty(json))
        {
            return null;
        }

        try
        {
            using var doc = JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty(endpoint, out var info) &&
                info.TryGetProperty("Username", out var user))
            {
                return user.GetString();
            }
        }
        catch
        {
        }

        return null;
    }

    public async ValueTask DisposeAsync()
    {
        if (_objRef != null)
        {
            await EndpointSyncJs.UnregisterAsync();
            _objRef.Dispose();
        }
    }

    public void Dispose()
    {
        if (_objRef != null)
        {
            EndpointSyncJs.UnregisterAsync().GetAwaiter().GetResult();
            _objRef.Dispose();
        }
    }
}
