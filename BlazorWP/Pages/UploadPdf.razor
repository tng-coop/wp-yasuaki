@page "/upload-pdf"
@using WordPressPCL
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Net.Http.Headers
@using System.Text.Json
@using System.IO
@using System.Net.Http
@inject LocalStorageJsInterop StorageJs
@inject UploadPdfJsInterop PdfJs
@inject AuthMessageHandler AuthHandler

<PageTitle>Upload PDF</PageTitle>

<h1>Upload PDF</h1>
@if (client == null)
{
    <p>No WordPress endpoint verified. Visit <NavLink href="/">Home</NavLink> first.</p>
}
else
{
    <div class="mb-3">
        <InputFile id="file-input" class="form-control" accept="application/pdf" OnChange="OnFileSelected" />
    </div>
    <div class="d-flex align-items-center gap-2 mb-3">
        <button class="btn btn-primary" @onclick="UploadAsync" disabled="@(_file == null)">Upload to WordPress</button>
        @if (!string.IsNullOrEmpty(status)) { <span>@status</span> }
    </div>
    @if (isUploading)
    {
        <div class="progress mb-3">
            <div class="progress-bar" role="progressbar" style="width: @uploadProgress%" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">@uploadProgress%</div>
        </div>
    }
    <canvas id="canvas" style="display:none;"></canvas>
    <div class="preview-wrapper">
        <img id="preview" class="preview-image mb-3" alt="PDF preview" />
    </div>
    @if (wpSizes != null)
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Size name</th>
                    <th>Width (px)</th>
                    <th>Height (px)</th>
                    <th>Crop mode</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in wpSizes)
                {
                    <tr>
                        <td>@s.Name</td>
                        <td>@s.Width</td>
                        <td>@s.Height</td>
                        <td>@s.CropMode</td>
                        <td>@s.Notes</td>
                    </tr>
                }
            </tbody>
        </table>

        @if (previewDataUrl != null && sizePreviews != null)
        {
            <div class="wp-size-previews d-flex flex-wrap gap-3">
                @foreach (var s in wpSizes)
                {
                    <div class="text-center">
                        <img src="@sizePreviews[s.Name]" width="@s.Width" height="@s.Height" class="border" style="object-fit:@(s.Name == "thumbnail" ? "cover" : "contain");" />
                        <div class="small text-muted">@s.Name</div>
                    </div>
                }
            </div>
        }
    }
}

@code {
    private WordPressClient? client;
    private HttpClient? httpClient;
    private IBrowserFile? _file;
    private string? status;
    private int uploadProgress;
    private bool isUploading;
    private DotNetStreamReference? _fileStreamRef;
    private PdfRenderInfo? pageInfo;
    private string? previewDataUrl;
    private List<WpSize>? wpSizes;
    private Dictionary<string, string>? sizePreviews;

    private record WpSize(string Name, int Width, int Height, string CropMode, string Notes);

    private void CalculateWpSizes()
    {
        if (pageInfo == null) return;
        var (w, h) = (pageInfo.Width, pageInfo.Height);

        int ScaledWidth(int targetLong)
        {
            double factor = (double)targetLong / Math.Max(w, h);
            return (int)Math.Round(w * factor);
        }

        int ScaledHeight(int targetLong)
        {
            double factor = (double)targetLong / Math.Max(w, h);
            return (int)Math.Round(h * factor);
        }

        wpSizes = new()
        {
            new("thumbnail", 150, 150, "hard (cover)", "Preview thumbnail"),
            new("medium", ScaledWidth(300), ScaledHeight(300), "soft (max)", "Scaled preview"),
            new("medium_large", ScaledWidth(768), ScaledHeight(768), "soft (max)", "Max width 768"),
            new("large", ScaledWidth(1024), ScaledHeight(1024), "soft (max)", "Max width 1024"),
            new("full", w, h, "n/a", "Full first page")
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var endpoint = await StorageJs.GetItemAsync("wpEndpoint");
        if (string.IsNullOrEmpty(endpoint)) return;
        var baseUrl = endpoint.TrimEnd('/') + "/wp-json/";
        httpClient = new HttpClient(AuthHandler) { BaseAddress = new Uri(baseUrl) };
        client = new WordPressClient(httpClient);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PdfJs.InitializeAsync("preview");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            _fileStreamRef = new(_file.OpenReadStream(long.MaxValue));
            pageInfo = await PdfJs.RenderFirstPageAsync(
                _fileStreamRef,
                "canvas",
                "preview");
            previewDataUrl = pageInfo.DataUrl;
            CalculateWpSizes();
            if (wpSizes != null)
            {
                sizePreviews = new();
                foreach (var s in wpSizes)
                {
                    if (s.Name == "full")
                    {
                        sizePreviews[s.Name] = previewDataUrl!;
                        continue;
                    }
                    var url = await PdfJs.GetScaledPreviewAsync(s.Width, s.Height, s.Name == "thumbnail");
                    if (url != null)
                    {
                        sizePreviews[s.Name] = url;
                    }
                }
            }
            StateHasChanged();
        }
    }

    private async Task UploadAsync()
    {
        if (client == null || _file == null || wpSizes == null || sizePreviews == null) return;
        status = null; uploadProgress = 0; isUploading = true;
        try
        {
            var endpoint = new Uri(httpClient!.BaseAddress!, "myplugin/v1/media/bundle");
            using var form = new MultipartFormDataContent();

            using var pdfStream = _file.OpenReadStream(long.MaxValue);
            form.Add(new StreamContent(pdfStream), "pdf", _file.Name);

            var dimensions = new Dictionary<string, object?>();

            foreach (var s in wpSizes)
            {
                if (!sizePreviews.TryGetValue(s.Name, out var dataUrl)) continue;
                var base64 = dataUrl[(dataUrl.IndexOf(',') + 1)..];
                var bytes = Convert.FromBase64String(base64);
                var imgContent = new ByteArrayContent(bytes);
                imgContent.Headers.ContentType = new MediaTypeHeaderValue("image/jpeg");
                form.Add(imgContent, $"previews[{s.Name}]", $"{Path.GetFileNameWithoutExtension(_file.Name)}-{s.Name}.jpg");

                if (s.Name != "full")
                {
                    dimensions[s.Name] = new { width = s.Width, height = s.Height };
                }
                else
                {
                    dimensions[s.Name] = new { };
                }
            }

            form.Add(new StringContent(JsonSerializer.Serialize(dimensions)), "dimensions");

            var resp = await httpClient!.PostAsync(endpoint, form);
            resp.EnsureSuccessStatusCode();
            status = "Upload complete";
            uploadProgress = 100;
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
        finally { isUploading = false; }
    }

    public async ValueTask DisposeAsync()
    {
        await PdfJs.DisposeAsync();
    }
}
