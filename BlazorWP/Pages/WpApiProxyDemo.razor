@page "/wp-api-proxy-demo"
@inject IJSRuntime JS
@inject LocalStorageJsInterop StorageJs

<PageTitle>WP API Proxy Demo</PageTitle>

<h3>WP API Proxy Demo</h3>

<div class="mb-3">
    <button class="btn btn-secondary me-2" @onclick="DirectJsCall">Direct JS Call</button>
    <button class="btn btn-primary" @onclick="CallViaProxyAsync">Call via Proxy</button>
</div>

<div class="mb-3">
    <h5>JS Fetch Result</h5>
    <pre>@jsResult</pre>
</div>

<div class="mb-3">
    <h5>Proxy Result</h5>
    <pre>@proxyResult</pre>
</div>

@code {
    private string? endpoint;
    private string jsResult = string.Empty;
    private string proxyResult = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        endpoint = await StorageJs.GetItemAsync("wpEndpoint");
    }

    private async Task DirectJsCall()
    {
        if (string.IsNullOrEmpty(endpoint))
        {
            jsResult = "No endpoint configured.";
            return;
        }
        var url = endpoint.TrimEnd('/') + "/wp-json/wp/v2/users/me";
        try
        {
            var scriptLines = new[]
            {
                $"fetch('{url}')",
                ".then(async res => {",
                "    const text = await res.text();",
                "    return res.ok ? text : res.status + ' ' + res.statusText + ': ' + text;",
                "})",
                ".catch(err => 'Error: ' + err)"
            };
            var script = string.Join("\n", scriptLines);
            jsResult = await JS.InvokeAsync<string>("eval", script);
        }
        catch (Exception ex)
        {
            jsResult = $"Error: {ex.Message}";
        }
    }

    private async Task CallViaProxyAsync()
    {
        try
        {
            proxyResult = await JS.InvokeAsync<string>("fetchProxy", "/wp-json/wp/v2/users/me");
        }
        catch (Exception ex)
        {
            proxyResult = $"Error: {ex.Message}";
        }
    }
}
