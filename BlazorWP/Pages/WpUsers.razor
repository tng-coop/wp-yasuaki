@page "/wp-users"
@using WordPressPCL
@using WordPressPCL.Models
@using Microsoft.AspNetCore.Components
@inject JwtService JwtService
@inject IWordPressApiService Api
@inject IStringLocalizer<WpUsers> L

<PageTitle>@L["WordPressUsersTitle"]</PageTitle>

@if (client == null)
{
    <p>@((MarkupString)string.Format(L["NoEndpoint"], $"<NavLink href=\"/\">{L["Home"]}</NavLink>"))</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="text-danger">@L["Error", error]</p>
}
else if (users == null)
{
    <p><em>@L["Loading"]</em></p>
}
else
{
    <div class="row">
        <div class="col-3">
            <ul class="list-group">
                @foreach (var u in users)
                {
                    <li class="list-group-item @GetActiveClass(u)"
                        @onclick="() => SelectUser(u)">
                        @u.Name
                    </li>
                }
            </ul>
        </div>
        <div class="col">
            @if (selectedUser != null)
            {
                <h3>@selectedUser.Name</h3>
                <p><strong>@L["EmailLabel"]</strong> @selectedUser.Email</p>
                <p><strong>@L["SlugLabel"]</strong> @selectedUser.Slug</p>
                <p><strong>@L["LinkLabel"]</strong> <a href="@selectedUser.Link" target="_blank">@selectedUser.Link</a></p>
            }
            else
            {
                <p>@L["SelectUserFromSidebar"]</p>
            }
        </div>
    </div>
}

@code {
    private WordPressClient? client;
    private IList<User>? users;
    private User? selectedUser;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        var wp = await Api.GetClientAsync();
        if (wp == null)
        {
            return;
        }

        client = wp;

        var token = await JwtService.GetCurrentJwtAsync();
        if (!string.IsNullOrEmpty(token))
        {
            client.Auth.SetJWToken(token);
        }

        try
        {
            users = await client.Users.GetAllAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void SelectUser(User user)
    {
        selectedUser = user;
    }

    private string GetActiveClass(User user) => selectedUser?.Id == user.Id ? "active" : string.Empty;
}

