@page "/"
@using System.ComponentModel.DataAnnotations
@using BlazorWP.Data
@inject IStringLocalizer<Home> L

<PageTitle>@L["HomeTitle"]</PageTitle>

<h1>@L["WpAnalysis"]</h1>

<div class="mb-3">
    <label for="wpUrl" class="form-label">@L["WordPressSiteUrl"]</label>
    <input id="wpUrl" list="siteSuggestions" class="form-control" @bind="userUrl" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="https://example.com" />
    @if (knownSites.Any())
    {
        <datalist id="siteSuggestions">
            @foreach (var site in knownSites)
            {
                <option value="@site"></option>
            }
        </datalist>
    }
</div>
<button class="btn btn-primary" @onclick="CheckApi">@L["CheckApi"]</button>
@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <button class="btn btn-secondary ms-2" @onclick="OpenLogin">@L["LoginToWordPress"]</button>
    <button class="btn btn-info ms-2" @onclick="ToggleAppPassword">@L["AppPassword"]</button>
}
@if (showAppPassword && !string.IsNullOrEmpty(verifiedEndpoint))
{
    <div class="mt-2">
        <EditForm Model="@appModel" OnValidSubmit="SaveAppPasswordAsync" FormName="apppassForm">
            <DataAnnotationsValidator />
            <InputText class="form-control mb-2"
                       @bind-Value="appModel.Username"
                       name="username"
                       autocomplete="username"
                       placeholder="@L["Username"]" />
            <div class="input-group mb-2">
                <InputText class="form-control"
                           type="@PasswordInputType"
                           @bind-Value="appModel.AppPassword"
                           name="password"
                           autocomplete="current-password"
                           placeholder="@L["AppPassword"]" />
                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                    <i class="bi @PasswordToggleIcon" aria-hidden="true"></i>
                </button>
            </div>
            <button class="btn btn-primary" type="submit">@L["Login"]</button>
        </EditForm>
    </div>
}

@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <p class="mt-3">Verified endpoint: @verifiedEndpoint</p>
}

@if (favoriteEndpoints.Any())
{
    <div class="mt-3">
        <h5>Favorite APIs</h5>
        <div class="accordion" id="favAccordion">
            @for (int i = 0; i < favoriteEndpoints.Count; i++)
            {
                var fav = favoriteEndpoints[i];
                var collapseId = $"favcollapse{i}";
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading@i">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            @fav.Path
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            <strong>Recorded under:</strong>
                            <ul>
                                @foreach (var site in fav.Sites)
                                {
                                    <li class="d-flex justify-content-between align-items-center">
                                        <span>@site</span>
                                        <button class="btn btn-sm btn-primary" @onclick="() => InvokeGet(fav, verifiedEndpoint ?? site)">GET</button>
                                    </li>
                                }
                            </ul>
                            @if (!string.IsNullOrEmpty(fav.Result))
                            {
                                @if (!string.IsNullOrEmpty(fav.RequestUrl))
                                {
                                    <div class="mt-2"><strong>URL:</strong> @fav.RequestUrl</div>
                                }
                                <pre class="json-view mt-2">@fav.Result</pre>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (logs.Any())
{
    <div class="mt-3">
        <h5>Communication Log</h5>
        <pre class="log-box">@string.Join("\n", logs)</pre>
    </div>
}

@if (!string.IsNullOrEmpty(status))
{
    <p class="mt-3">@status</p>
}

@code {
    private string? userUrl;
    private string? status;
    private string? verifiedEndpoint;
    private List<string> logs = new();
    private List<FavoriteEndpoint> favoriteEndpoints = new();
    private List<string> knownSites = new();
    private bool showAppPassword;
    private bool passwordVisible;
    private string PasswordInputType => passwordVisible ? "text" : "password";
    private string PasswordToggleIcon => passwordVisible ? "bi-eye-slash" : "bi-eye";
    private AppPasswordModel appModel = new();

    public class AppPasswordModel
    {
        [Required] public string Username { get; set; } = string.Empty;
        [Required] public string AppPassword { get; set; } = string.Empty;
    }

    [Inject]
    private IWordPressApiService Api { get; set; } = default!;

    [Inject]
    private LocalStorageJsInterop StorageJs { get; set; } = default!;
    [Inject]
    private IJSRuntime JS { get; set; } = default!;
    [Inject]
    private CredentialManagerJsInterop CredentialJs { get; set; } = default!;
    [Inject]
    private AppPasswordService AppPasswordService { get; set; } = default!;
    [Inject]
    private NavigationManager Navigation { get; set; } = default!;
    [Inject]
    private BlazorWP.Data.AppFlags Flags { get; set; } = default!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            verifiedEndpoint = Flags.WpUrl;
            userUrl = verifiedEndpoint;
            if (!string.IsNullOrEmpty(verifiedEndpoint))
            {
                Api.SetEndpoint(verifiedEndpoint);
            }

            var creds = await AppPasswordService.GetAsync();
            if (creds is not null)
            {
                appModel.Username = creds.Value.Username;
                appModel.AppPassword = creds.Value.AppPassword;
            }
            await LoadFavorites();
            StateHasChanged();
        }
    }

    private async Task LoadFavorites()
    {
        favoriteEndpoints.Clear();
        knownSites.Clear();

        Dictionary<string, List<string>>? favData = null;
        var favJson = await StorageJs.GetItemAsync("favoriteApis");
        if (!string.IsNullOrEmpty(favJson))
        {
            try
            {
                favData = JsonSerializer.Deserialize<Dictionary<string, List<string>>>(favJson);
            }
            catch
            {
                // ignore deserialization errors
            }
        }

        if (favData != null)
        {
            var dict = new Dictionary<string, HashSet<string>>();
            knownSites = favData.Keys.ToList();
            foreach (var pair in favData)
            {
                foreach (var raw in pair.Value)
                {
                    var path = NormalizePath(raw);
                    if (!dict.TryGetValue(path, out var set))
                    {
                        set = new HashSet<string>();
                        dict[path] = set;
                    }
                    set.Add(pair.Key);
                }
            }
            favoriteEndpoints = dict.OrderBy(kv => kv.Key)
                .Select(kv => new FavoriteEndpoint { Path = kv.Key, Sites = kv.Value.ToList() })
                .ToList();
        }

        knownSites = knownSites.OrderBy(k => k).ToList();
        if (!string.IsNullOrEmpty(verifiedEndpoint))
        {
            knownSites.Remove(verifiedEndpoint);
            knownSites.Insert(0, verifiedEndpoint);
        }
    }

    private async Task CheckApi()
    {
        status = null;

        if (string.IsNullOrWhiteSpace(userUrl))
        {
            status = "Please enter a URL.";
            return;
        }

        var trimmed = userUrl!.Trim();
        var candidates = new List<string>();

        if (trimmed.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            trimmed.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
        {
            candidates.Add(trimmed);
        }
        else
        {
            candidates.Add($"https://{trimmed}");
            candidates.Add($"http://{trimmed}");
        }

        foreach (var candidate in candidates)
        {
            logs.Add($"Checking {candidate}");
            await InvokeAsync(StateHasChanged);
            try
            {
                if (!Uri.TryCreate(candidate, UriKind.Absolute, out var baseUri))
                {
                    continue;
                }

                Api.SetEndpoint(baseUri.ToString());
                var http = Api.HttpClient;
                if (http == null)
                {
                    continue;
                }
                var apiEndpoint = new Uri(http.BaseAddress!, "wp/v2").ToString().TrimEnd('/');

                logs.Add($"Requesting {apiEndpoint}");
                await InvokeAsync(StateHasChanged);

                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                var request = new HttpRequestMessage(HttpMethod.Get, apiEndpoint);
                var rawRequest = await FormatRawRequest(request);
                logs.Add($"-> {rawRequest}");
                await InvokeAsync(StateHasChanged);

                var response = await http.SendAsync(request, cts.Token);
                var raw = await FormatRawResponse(response);
                logs.Add($"<- {raw}");
                await InvokeAsync(StateHasChanged);
                if (response.IsSuccessStatusCode)
                {
                    var root = baseUri.ToString().TrimEnd('/');
                    verifiedEndpoint = root;
                    userUrl = root;
                    await Flags.SetWpUrl(root);
                    var newUrl = Navigation.GetUriWithQueryParameter("wpurl", root);
                    Navigation.NavigateTo(newUrl, replace: true);
                    await LoadFavorites();
                    status = $"Success! v2 endpoint is {apiEndpoint}";
                    return;
                }
            }
            catch (Exception ex)
            {
                logs.Add($"Error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
                status = $"Error: {ex.Message}";
            }
        }

        if (string.IsNullOrEmpty(status))
        {
            status = "Failed to verify endpoint.";
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckApi();
        }
    }

    private static async Task<string> FormatRawResponse(HttpResponseMessage response)
    {
        var sb = new StringBuilder();
        sb.Append($"HTTP/{response.Version.Major}.{response.Version.Minor} {(int)response.StatusCode} {response.ReasonPhrase}\r\n");
        foreach (var header in response.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        foreach (var header in response.Content.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        sb.Append("\r\n");
        var bytes = await response.Content.ReadAsByteArrayAsync();
        Encoding encoding;
        if (response.Content.Headers.ContentType?.CharSet is string cs)
        {
            try
            {
                encoding = Encoding.GetEncoding(cs);
            }
            catch
            {
                encoding = Encoding.UTF8;
            }
        }
        else
        {
            encoding = Encoding.UTF8;
        }
        sb.Append(encoding.GetString(bytes));
        return sb.ToString();
    }

    private static async Task<string> FormatRawRequest(HttpRequestMessage request)
    {
        var sb = new StringBuilder();
        var uri = request.RequestUri ?? new Uri("/", UriKind.Relative);
        var requestUri = uri.IsAbsoluteUri ? uri.ToString() : uri.PathAndQuery;
        sb.Append($"{request.Method} {requestUri} HTTP/{request.Version.Major}.{request.Version.Minor}\r\n");

        // Host header
        if (!request.Headers.Contains("Host") && uri.Host.Length > 0)
        {
            sb.Append($"Host: {uri.Host}\r\n");
        }

        foreach (var header in request.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        if (request.Content != null)
        {
            foreach (var header in request.Content.Headers)
            {
                sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
            }
        }
        sb.Append("\r\n");
        if (request.Content != null)
        {
            var bytes = await request.Content.ReadAsByteArrayAsync();
            sb.Append(Encoding.UTF8.GetString(bytes));
        }
        return sb.ToString();
    }

    private async Task OpenLogin()
    {
        if (string.IsNullOrEmpty(verifiedEndpoint))
        {
            return;
        }

        var loginUrl = GetLoginUrl(verifiedEndpoint);
        await JS.InvokeVoidAsync("open", loginUrl, "_blank", "noopener,noreferrer,width=800,height=600");
    }

    private async Task ToggleAppPassword()
    {
        showAppPassword = !showAppPassword;
        if (showAppPassword)
        {
            var creds = await AppPasswordService.GetAsync();
            if (creds is not null)
            {
                appModel.Username = creds.Value.Username;
                appModel.AppPassword = creds.Value.AppPassword;
            }
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
    }

    private async Task SaveAppPasswordAsync()
    {
        await AppPasswordService.SetAsync(appModel.Username, appModel.AppPassword);
        await CredentialJs.StoreAsync(appModel.Username, appModel.AppPassword);
        status = "Credentials stored.";
        StateHasChanged();
    }

    private static string GetLoginUrl(string endpoint)
    {
        var url = endpoint;
        if (url.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp-json/wp/v2".Length];
        }
        else if (url.EndsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp/v2".Length];
        }

        return url.TrimEnd('/') + "/wp-login.php";
    }

    private async Task InvokeGet(FavoriteEndpoint fav, string site)
    {
        try
        {
            var url = CombineUrl(site, fav.Path);
            fav.RequestUrl = url;
            var http = Api.HttpClient;
            if (http == null)
            {
                fav.Result = "Error: API client not available.";
            }
            else
            {
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                var response = await http.GetAsync(url, cts.Token);
                fav.Result = await FormatRawResponse(response);
            }
        }
        catch (Exception ex)
        {
            fav.Result = $"Error: {ex.Message}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private static string CombineUrl(string site, string path)
    {
        path = NormalizePath(path);
        var trimmed = site.TrimEnd('/');

        if (trimmed.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            var baseUrl = trimmed[..^"/wp/v2".Length];
            return baseUrl.TrimEnd('/') + path;
        }

        if (trimmed.EndsWith("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + path;
        }

        if (!trimmed.Contains("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + "/wp-json" + path;
        }

        return trimmed + (path.StartsWith("/") ? path : "/" + path);
    }

    private static string NormalizePath(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return path;
        }

        if (path.StartsWith("/routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = path["/routes".Length..];
        }
        else if (path.StartsWith("routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = "/" + path["routes/".Length..];
        }

        var idx = path.IndexOf("/routes/", StringComparison.OrdinalIgnoreCase);
        if (idx >= 0)
        {
            var prefix = path[..idx];
            var after = path[(idx + "/routes".Length)..];
            if (after.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                path = prefix + after[prefix.Length..];
            }
        }

        return path;
    }

    public class FavoriteEndpoint
    {
        public string Path { get; set; } = string.Empty;
        public List<string> Sites { get; set; } = new();
        public string? Result { get; set; }
        public string? RequestUrl { get; set; }
    }
}
