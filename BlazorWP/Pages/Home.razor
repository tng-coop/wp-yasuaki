@page "/"

<PageTitle>Home</PageTitle>

<h1>WordPress analysis</h1>

<div class="mb-3">
    <label for="wpUrl" class="form-label">WordPress site URL</label>
    <input id="wpUrl" list="siteSuggestions" class="form-control" @bind="userUrl" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="https://example.com" />
    @if (knownSites.Any())
    {
        <datalist id="siteSuggestions">
            @foreach (var site in knownSites)
            {
                <option value="@site"></option>
            }
        </datalist>
    }
</div>
<button class="btn btn-primary" @onclick="CheckApi">Check API</button>
@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <button class="btn btn-secondary ms-2" @onclick="OpenLogin">Login to WordPress</button>
    <button class="btn btn-info ms-2" @onclick="ToggleJwtLogin">JWT Login</button>
}
@if (showJwtLogin && !string.IsNullOrEmpty(verifiedEndpoint))
{
    <div class="mt-2">
        <input class="form-control mb-2" placeholder="Username" @bind="jwtUsername" />
        <div class="input-group mb-2">
            <input class="form-control" type="@PasswordInputType" placeholder="Password" @bind="jwtPassword" />
            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                <i class="bi @PasswordToggleIcon" aria-hidden="true"></i>
            </button>
        </div>
        <button class="btn btn-primary" @onclick="JwtLoginAsync">Login</button>
    </div>
}
@if (!string.IsNullOrEmpty(jwtToken))
{
    <div class="mt-2">
        <strong>JWT:</strong> <code>@jwtToken</code>
    </div>
    @if (!string.IsNullOrEmpty(jwtDecoded))
    {
        <div class="mt-2">
            <strong>JWT Payload:</strong>
            <pre class="json-view">@jwtDecoded</pre>
            <details class="mt-2">
                <summary>Interpretation</summary>
                <pre>
This JSON is the payload of a JWT (JSON Web Token). Here’s what each field means:

iss (Issuer):
The token was issued by the “authority” at
https://yasuaki.com
Any service that trusts tokens from that URL can accept this one.

iat (Issued At):
A Unix timestamp (seconds since January 1 1970 UTC) indicating when the token was created.

1750315403 → 2025-06-19 06:43:23 UTC  
                 = 2025-06-19 15:43:23 JST  
(Asia/Tokyo is UTC+9.)

nbf (Not Before):
Tokens should not be considered valid before this time. In this case it’s identical to iat, so the token is valid immediately upon issuance.

exp (Expiration):
When the token stops being valid.

1750920203 → 2025-06-26 06:43:23 UTC  
                 = 2025-06-26 15:43:23 JST  
After that moment, any service should reject the token.

data (Custom Claims):
Anything you want to carry. Here it has a user object with:
{
  "id": "1"
}
so the token “knows” it refers to user #1 in your system.

In plain language:
This token was minted by https://yasuaki.com at 2025-06-19 06:43:23 UTC (15:43 JST), becomes valid immediately, and stays valid until exactly one week later, 2025-06-26 06:43:23 UTC (15:43 JST). It carries a payload identifying “user 1.” Any service that sees it should verify its signature, check that “iss” matches the expected issuer, ensure the current time is between nbf and exp, and then trust that the bearer is user 1.
                </pre>
            </details>
        </div>
    }
}
@if (!string.IsNullOrEmpty(jwtError))
{
    <p class="text-danger mt-2">@jwtError</p>
}

@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <p class="mt-3">Verified endpoint: @verifiedEndpoint</p>
}

@if (favoriteEndpoints.Any())
{
    <div class="mt-3">
        <h5>Favorite APIs</h5>
        <div class="accordion" id="favAccordion">
            @for (int i = 0; i < favoriteEndpoints.Count; i++)
            {
                var fav = favoriteEndpoints[i];
                var collapseId = $"favcollapse{i}";
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading@i">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            @fav.Path
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            <strong>Recorded under:</strong>
                            <ul>
                                @foreach (var site in fav.Sites)
                                {
                                    <li class="d-flex justify-content-between align-items-center">
                                        <span>@site</span>
                                        <button class="btn btn-sm btn-primary" @onclick="() => InvokeGet(fav, verifiedEndpoint ?? site)">GET</button>
                                    </li>
                                }
                            </ul>
                            @if (!string.IsNullOrEmpty(fav.Result))
                            {
                                @if (!string.IsNullOrEmpty(fav.RequestUrl))
                                {
                                    <div class="mt-2"><strong>URL:</strong> @fav.RequestUrl</div>
                                }
                                <pre class="json-view mt-2">@fav.Result</pre>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@if (logs.Any())
{
    <div class="mt-3">
        <h5>Communication Log</h5>
        <pre class="log-box">@string.Join("\n", logs)</pre>
    </div>
}

@if (!string.IsNullOrEmpty(status))
{
    <p class="mt-3">@status</p>
}

@code {
    private string? userUrl;
    private string? status;
    private string? verifiedEndpoint;
    private List<string> logs = new();
    private List<FavoriteEndpoint> favoriteEndpoints = new();
    private List<string> knownSites = new();
    private bool showJwtLogin;
    private bool passwordVisible;
    private string PasswordInputType => passwordVisible ? "text" : "password";
    private string PasswordToggleIcon => passwordVisible ? "bi-eye-slash" : "bi-eye";
    private string jwtUsername = string.Empty;
    private string jwtPassword = string.Empty;
    private string? jwtToken;
    private string? jwtDecoded;
    private string? jwtError;

    private class JwtInfo
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string? Token { get; set; }
    }

    [Inject]
    private HttpClient Http { get; set; } = default!;

    [Inject]
    private LocalStorageJsInterop StorageJs { get; set; } = default!;
    [Inject]
    private WpEndpointSyncJsInterop EndpointSyncJs { get; set; } = default!;
    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            verifiedEndpoint = await StorageJs.GetItemAsync("wpEndpoint");
            userUrl = verifiedEndpoint;
            if (!string.IsNullOrEmpty(verifiedEndpoint))
            {
                var info = await LoadJwtInfoAsync(verifiedEndpoint);
                if (info != null)
                {
                    jwtToken = info.Token;
                    jwtUsername = info.Username;
                    jwtPassword = info.Password;
                    jwtDecoded = DecodeJwt(jwtToken);
                }
                else
                {
                    jwtToken = await StorageJs.GetItemAsync("jwtToken");
                    jwtDecoded = DecodeJwt(jwtToken);
                }
            }
            else
            {
                jwtToken = await StorageJs.GetItemAsync("jwtToken");
                jwtDecoded = DecodeJwt(jwtToken);
            }
            await LoadFavorites();
            StateHasChanged();
        }
    }

    private async Task LoadFavorites()
    {
        favoriteEndpoints.Clear();
        knownSites.Clear();

        Dictionary<string, List<string>>? favData = null;
        var favJson = await StorageJs.GetItemAsync("favoriteApis");
        if (!string.IsNullOrEmpty(favJson))
        {
            try
            {
                favData = JsonSerializer.Deserialize<Dictionary<string, List<string>>>(favJson);
            }
            catch
            {
                // ignore deserialization errors
            }
        }

        if (favData != null)
        {
            var dict = new Dictionary<string, HashSet<string>>();
            knownSites = favData.Keys.ToList();
            foreach (var pair in favData)
            {
                foreach (var raw in pair.Value)
                {
                    var path = NormalizePath(raw);
                    if (!dict.TryGetValue(path, out var set))
                    {
                        set = new HashSet<string>();
                        dict[path] = set;
                    }
                    set.Add(pair.Key);
                }
            }
            favoriteEndpoints = dict.OrderBy(kv => kv.Key)
                .Select(kv => new FavoriteEndpoint { Path = kv.Key, Sites = kv.Value.ToList() })
                .ToList();
        }

        var siteInfo = await LoadSiteInfoAsync();
        foreach (var site in siteInfo.Keys)
        {
            if (!knownSites.Contains(site))
            {
                knownSites.Add(site);
            }
        }

        knownSites = knownSites.OrderBy(k => k).ToList();
        if (!string.IsNullOrEmpty(verifiedEndpoint))
        {
            knownSites.Remove(verifiedEndpoint);
            knownSites.Insert(0, verifiedEndpoint);
        }
    }

    private async Task CheckApi()
    {
        status = null;

        if (string.IsNullOrWhiteSpace(userUrl))
        {
            status = "Please enter a URL.";
            return;
        }

        var trimmed = userUrl!.Trim();
        var candidates = new List<string>();

        if (trimmed.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            trimmed.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
        {
            candidates.Add(trimmed);
        }
        else
        {
            candidates.Add($"https://{trimmed}");
            candidates.Add($"http://{trimmed}");
        }

        foreach (var candidate in candidates)
        {
            logs.Add($"Checking {candidate}");
            await InvokeAsync(StateHasChanged);
            try
            {
                if (!Uri.TryCreate(candidate, UriKind.Absolute, out var baseUri))
                {
                    continue;
                }

                var builder = new UriBuilder(baseUri)
                {
                    Path = baseUri.AbsolutePath.TrimEnd('/') + "/wp-json/wp/v2"
                };
                var apiEndpoint = builder.Uri.ToString().TrimEnd('/');

                logs.Add($"Requesting {apiEndpoint}");
                await InvokeAsync(StateHasChanged);

                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                var request = new HttpRequestMessage(HttpMethod.Get, apiEndpoint);
                var rawRequest = await FormatRawRequest(request);
                logs.Add($"-> {rawRequest}");
                await InvokeAsync(StateHasChanged);

                var response = await Http.SendAsync(request, cts.Token);
                var raw = await FormatRawResponse(response);
                logs.Add($"<- {raw}");
                await InvokeAsync(StateHasChanged);
                if (response.IsSuccessStatusCode)
                {
                    var root = baseUri.ToString().TrimEnd('/');
                    verifiedEndpoint = root;
                    userUrl = root;
                    await EndpointSyncJs.SetAsync(root);

                    var siteInfo = await LoadSiteInfoAsync();
                    if (!siteInfo.ContainsKey(root))
                    {
                        siteInfo[root] = new JwtInfo();
                        await SaveSiteInfoAsync(siteInfo);
                    }

                    var info = await LoadJwtInfoAsync(root);
                    if (info != null)
                    {
                        jwtToken = info.Token;
                        jwtUsername = info.Username;
                        jwtPassword = info.Password;
                        jwtDecoded = DecodeJwt(jwtToken);
                        if (!string.IsNullOrEmpty(jwtToken))
                        {
                            await StorageJs.SetItemAsync("jwtToken", jwtToken);
                        }
                        else
                        {
                            await StorageJs.DeleteAsync("jwtToken");
                        }
                    }
                    else
                    {
                        jwtToken = null;
                        jwtDecoded = null;
                        await StorageJs.DeleteAsync("jwtToken");
                    }
                    await LoadFavorites();
                    status = $"Success! v2 endpoint is {apiEndpoint}";
                    return;
                }
            }
            catch (Exception ex)
            {
                logs.Add($"Error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
                status = $"Error: {ex.Message}";
            }
        }

        if (string.IsNullOrEmpty(status))
        {
            status = "Failed to verify endpoint.";
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckApi();
        }
    }

    private static async Task<string> FormatRawResponse(HttpResponseMessage response)
    {
        var sb = new StringBuilder();
        sb.Append($"HTTP/{response.Version.Major}.{response.Version.Minor} {(int)response.StatusCode} {response.ReasonPhrase}\r\n");
        foreach (var header in response.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        foreach (var header in response.Content.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        sb.Append("\r\n");
        var bytes = await response.Content.ReadAsByteArrayAsync();
        Encoding encoding;
        if (response.Content.Headers.ContentType?.CharSet is string cs)
        {
            try
            {
                encoding = Encoding.GetEncoding(cs);
            }
            catch
            {
                encoding = Encoding.UTF8;
            }
        }
        else
        {
            encoding = Encoding.UTF8;
        }
        sb.Append(encoding.GetString(bytes));
        return sb.ToString();
    }

    private static async Task<string> FormatRawRequest(HttpRequestMessage request)
    {
        var sb = new StringBuilder();
        var uri = request.RequestUri ?? new Uri("/", UriKind.Relative);
        var requestUri = uri.IsAbsoluteUri ? uri.ToString() : uri.PathAndQuery;
        sb.Append($"{request.Method} {requestUri} HTTP/{request.Version.Major}.{request.Version.Minor}\r\n");

        // Host header
        if (!request.Headers.Contains("Host") && uri.Host.Length > 0)
        {
            sb.Append($"Host: {uri.Host}\r\n");
        }

        foreach (var header in request.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        if (request.Content != null)
        {
            foreach (var header in request.Content.Headers)
            {
                sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
            }
        }
        sb.Append("\r\n");
        if (request.Content != null)
        {
            var bytes = await request.Content.ReadAsByteArrayAsync();
            sb.Append(Encoding.UTF8.GetString(bytes));
        }
        return sb.ToString();
    }

    private async Task OpenLogin()
    {
        if (string.IsNullOrEmpty(verifiedEndpoint))
        {
            return;
        }

        var loginUrl = GetLoginUrl(verifiedEndpoint);
        await JS.InvokeVoidAsync("open", loginUrl, "_blank", "noopener,noreferrer,width=800,height=600");
    }

    private async Task ToggleJwtLogin()
    {
        showJwtLogin = !showJwtLogin;
        jwtError = null;
        jwtToken = null;
        jwtDecoded = null;

        if (showJwtLogin && !string.IsNullOrEmpty(verifiedEndpoint))
        {
            var info = await LoadJwtInfoAsync(verifiedEndpoint);
            if (info != null)
            {
                jwtUsername = info.Username;
                jwtPassword = info.Password;
            }
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
    }

    private async Task JwtLoginAsync()
    {
        if (string.IsNullOrEmpty(verifiedEndpoint))
        {
            return;
        }

        var url = GetJwtUrl(verifiedEndpoint);
        var payload = JsonSerializer.Serialize(new { username = jwtUsername, password = jwtPassword });
        using var content = new StringContent(payload, Encoding.UTF8, "application/json");
        try
        {
            using var request = new HttpRequestMessage(HttpMethod.Post, url) { Content = content };
            var response = await Http.SendAsync(request);
            var json = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var doc = JsonDocument.Parse(json);
                    if (doc.RootElement.TryGetProperty("token", out var tokenEl))
                    {
                        jwtToken = tokenEl.GetString();
                        if (!string.IsNullOrEmpty(jwtToken))
                        {
                            jwtDecoded = DecodeJwt(jwtToken);
                            var info = new JwtInfo
                            {
                                Username = jwtUsername,
                                Password = jwtPassword,
                                Token = jwtToken
                            };
                            await SaveJwtInfoAsync(verifiedEndpoint, info);
                        }
                    }
                    else
                    {
                        jwtToken = json;
                        jwtDecoded = DecodeJwt(jwtToken);
                    }
                    jwtError = null;
                }
                catch
                {
                    jwtToken = json;
                    jwtDecoded = DecodeJwt(jwtToken);
                    jwtError = null;
                }
            }
            else
            {
                jwtError = json;
                jwtToken = null;
                jwtDecoded = null;
            }
        }
        catch (Exception ex)
        {
            jwtError = ex.Message;
            jwtToken = null;
            jwtDecoded = null;
        }
    }

    private static string GetLoginUrl(string endpoint)
    {
        var url = endpoint;
        if (url.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp-json/wp/v2".Length];
        }
        else if (url.EndsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp/v2".Length];
        }

        return url.TrimEnd('/') + "/wp-login.php";
    }

    private static string GetJwtUrl(string endpoint)
    {
        var url = endpoint;
        if (url.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp-json/wp/v2".Length];
        }
        else if (url.EndsWith("/wp-json", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp-json".Length];
        }
        else if (url.EndsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp/v2".Length];
        }

        return url.TrimEnd('/') + "/wp-json/jwt-auth/v1/token";
    }

    private static string GetJwtTokenKey(string endpoint)
        => $"jwtToken:{endpoint}";

    private const string SiteInfoKey = "siteinfo";

    private static string GetJwtInfoKey(string endpoint)
        => endpoint;

    private static string GetOldJwtInfoKey(string endpoint)
        => $"jwtInfo:{endpoint}";

    private async Task<Dictionary<string, JwtInfo>> LoadSiteInfoAsync()
    {
        var json = await StorageJs.GetItemAsync(SiteInfoKey);
        if (string.IsNullOrEmpty(json))
        {
            return new();
        }

        try
        {
            return JsonSerializer.Deserialize<Dictionary<string, JwtInfo>>(json) ?? new();
        }
        catch
        {
            return new();
        }
    }

    private Task SaveSiteInfoAsync(Dictionary<string, JwtInfo> data)
    {
        var json = JsonSerializer.Serialize(data);
        return StorageJs.SetItemAsync(SiteInfoKey, json).AsTask();
    }

    private async Task<JwtInfo?> LoadJwtInfoAsync(string endpoint)
    {
        var data = await LoadSiteInfoAsync();
        if (data.TryGetValue(endpoint, out var info))
        {
            return info;
        }

        // Fallback to old storage formats
        var key = GetJwtInfoKey(endpoint);
        var json = await StorageJs.GetItemAsync(key);
        if (string.IsNullOrEmpty(json))
        {
            var oldKey = GetOldJwtInfoKey(endpoint);
            json = await StorageJs.GetItemAsync(oldKey);
        }

        if (string.IsNullOrEmpty(json))
        {
            var token = await StorageJs.GetItemAsync(GetJwtTokenKey(endpoint));
            if (!string.IsNullOrEmpty(token))
            {
                info = new JwtInfo { Token = token };
                data[endpoint] = info;
                await SaveSiteInfoAsync(data);
                return info;
            }
            return null;
        }

        try
        {
            info = JsonSerializer.Deserialize<JwtInfo>(json);
        }
        catch
        {
            info = new JwtInfo { Token = json };
        }

        if (info != null)
        {
            data[endpoint] = info;
            await SaveSiteInfoAsync(data);
        }

        return info;
    }

    private async Task SaveJwtInfoAsync(string endpoint, JwtInfo info)
    {
        var data = await LoadSiteInfoAsync();
        data[endpoint] = info;
        await SaveSiteInfoAsync(data);

        if (!string.IsNullOrEmpty(info.Token))
        {
            await StorageJs.SetItemAsync("jwtToken", info.Token);
        }
        else
        {
            await StorageJs.DeleteAsync("jwtToken");
        }

        var oldKey = GetOldJwtInfoKey(endpoint);
        await StorageJs.DeleteAsync(oldKey);
        await StorageJs.DeleteAsync(GetJwtTokenKey(endpoint));
        await StorageJs.DeleteAsync(endpoint);
    }

    private static string? DecodeJwt(string? token)
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            return null;
        }

        var parts = token.Split('.');
        if (parts.Length < 2)
        {
            return null;
        }

        try
        {
            var payload = parts[1]
                .Replace('-', '+')
                .Replace('_', '/');
            switch (payload.Length % 4)
            {
                case 2: payload += "=="; break;
                case 3: payload += "="; break;
            }
            var bytes = Convert.FromBase64String(payload);
            using var doc = JsonDocument.Parse(bytes);
            return JsonSerializer.Serialize(doc, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return null;
        }
    }

    private async Task InvokeGet(FavoriteEndpoint fav, string site)
    {
        try
        {
            var url = CombineUrl(site, fav.Path);
            fav.RequestUrl = url;
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var response = await Http.GetAsync(url, cts.Token);
            fav.Result = await FormatRawResponse(response);
        }
        catch (Exception ex)
        {
            fav.Result = $"Error: {ex.Message}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private static string CombineUrl(string site, string path)
    {
        path = NormalizePath(path);
        var trimmed = site.TrimEnd('/');

        if (trimmed.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            var baseUrl = trimmed[..^"/wp/v2".Length];
            return baseUrl.TrimEnd('/') + path;
        }

        if (trimmed.EndsWith("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + path;
        }

        if (!trimmed.Contains("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + "/wp-json" + path;
        }

        return trimmed + (path.StartsWith("/") ? path : "/" + path);
    }

    private static string NormalizePath(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return path;
        }

        if (path.StartsWith("/routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = path["/routes".Length..];
        }
        else if (path.StartsWith("routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = "/" + path["routes/".Length..];
        }

        var idx = path.IndexOf("/routes/", StringComparison.OrdinalIgnoreCase);
        if (idx >= 0)
        {
            var prefix = path[..idx];
            var after = path[(idx + "/routes".Length)..];
            if (after.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                path = prefix + after[prefix.Length..];
            }
        }

        return path;
    }

    public class FavoriteEndpoint
    {
        public string Path { get; set; } = string.Empty;
        public List<string> Sites { get; set; } = new();
        public string? Result { get; set; }
        public string? RequestUrl { get; set; }
    }
}
