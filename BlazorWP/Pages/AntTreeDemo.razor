@page "/ant-tree-demo"

<PageTitle>Ant Design Tree Demo</PageTitle>

<h3>Ant Design Tree Drag-and-Drop Demo</h3>
<p class="text-muted">
    This example demonstrates using the Ant Design <code>Tree</code> component with
    drag-and-drop enabled. Drag a node to reorder it or nest it under another
    node. Dropping a node directly on top of another will place it in that
    folder.
</p>
<ul>
    <li>Set <code>Draggable="true"</code> to enable dragging.</li>
    <li>The tree automatically highlights valid drop targets and expands collapsed nodes on hover.</li>
    <li>Handle <code>OnDrop</code> to react when a node has been moved.</li>
</ul>

<Tree TItem="AntTreeNode" DataSource="@treeData" Draggable="true"
      KeyExpression="@(n => n.Id)"
      ChildrenExpression="@(n => n.DataItem.Children)"
      TitleExpression="@(n => n.DataItem.Title)"
      OnDrop="HandleDrop" OnDragStart="HandleDragStart" OnDragEnd="HandleDragEnd">
</Tree>

@code {
    private List<AntTreeNode> treeData = new()
    {
        new AntTreeNode
        {
            Id = 1,
            Title = "Parent 1",
            Children = new()
            {
                new AntTreeNode { Id = 2, Title = "Child 1-1" },
                new AntTreeNode { Id = 3, Title = "Child 1-2" }
            }
        },
        new AntTreeNode
        {
            Id = 4,
            Title = "Parent 2"
        }
    };

    private void HandleDrop(TreeEventArgs<AntTreeNode> args)
    {
        // Ant Design Tree does not automatically update the data structure on
        // drop.  We need to move the dragged item ourselves.
        if (args.Node?.DataItem == null || args.TargetNode?.DataItem == null)
        {
            return;
        }

        var source = args.Node.DataItem;
        var target = args.TargetNode.DataItem;

        // Prevent dropping a node onto itself or one of its children
        if (source == target || IsDescendantOf(source, target))
        {
            return;
        }

        // Remove the dragged node from its current parent/root
        var currentParent = FindParentList(treeData, source, out _);
        currentParent?.Remove(source);

        if (!args.DropBelow)
        {
            // Dropped directly onto target - make it a child
            target.Children.Add(source);
        }
        else
        {
            // Dropped after target - insert as a sibling
            var list = FindParentList(treeData, target, out _);
            if (list != null)
            {
                var insertIndex = list.IndexOf(target) + 1;
                list.Insert(insertIndex, source);
            }
        }

        StateHasChanged();
        //Console.WriteLine($"Moved '{source.Title}' {(args.DropBelow ? "after" : "into")} '{target.Title}'");
    }

    private static List<AntTreeNode>? FindParentList(List<AntTreeNode> nodes, AntTreeNode search, out AntTreeNode? parent)
    {
        if (nodes.Contains(search))
        {
            parent = null;
            return nodes;
        }

        foreach (var node in nodes)
        {
            if (node.Children.Contains(search))
            {
                parent = node;
                return node.Children;
            }

            var result = FindParentList(node.Children, search, out parent);
            if (result != null)
            {
                return result;
            }
        }

        parent = null;
        return null;
    }

    private static bool IsDescendantOf(AntTreeNode child, AntTreeNode parent)
    {
        if (parent.Children.Contains(child))
        {
            return true;
        }

        foreach (var node in parent.Children)
        {
            if (IsDescendantOf(child, node))
            {
                return true;
            }
        }

        return false;
    }

    private void HandleDragStart(TreeEventArgs<AntTreeNode> args)
    {
        //Console.WriteLine($"Dragging '{args.Node.DataItem.Title}'");
    }

    private void HandleDragEnd(TreeEventArgs<AntTreeNode> args)
    {
        //Console.WriteLine($"Finished dragging '{args.Node.DataItem.Title}'");
    }

    public class AntTreeNode
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public List<AntTreeNode> Children { get; set; } = new();
    }
}
