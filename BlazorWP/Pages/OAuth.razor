@page "/oauth"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Nav
@inject SessionStorageJsInterop SessionJs
@inject IConfiguration Config

<!--
  Client IDs are provided via configuration using environment variables such as
  Authentication__Google__ClientId, Authentication__GitHub__ClientId and
  Authentication__LINE__ClientId.
  These map to configuration keys "Authentication:Google:ClientId" etc.
-->

<PageTitle>OAuth PKCE</PageTitle>

<h1>OAuth PKCE Demo</h1>

@if (!string.IsNullOrEmpty(code))
{
    <p>Authorization code: <code>@(code)</code></p>
}
else
{
    <p>Select a provider to begin OAuth login.</p>
    <button class="btn btn-primary me-2" @onclick="async () => await StartOAuth(Google)">Google</button>
    <button class="btn btn-secondary me-2" @onclick="async () => await StartOAuth(GitHub)">GitHub</button>
    <button class="btn btn-success" @onclick="async () => await StartOAuth(Line)">LINE</button>
}

@code {
    private string? code;
    private OAuthProvider Google = default!;
    private OAuthProvider GitHub = default!;
    private OAuthProvider Line = default!;

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var q = QueryHelpers.ParseQuery(uri.Query);
        if (q.TryGetValue("code", out var c))
        {
            code = c.ToString();
        }
        //Console.WriteLine("Google Client ID: " + Config["Authentication:Google:ClientId"]);

        Google = new OAuthProvider(
            "https://accounts.google.com/o/oauth2/v2/auth",
            Config["Authentication:Google:ClientId"] ?? string.Empty,
            "openid email profile");

        GitHub = new OAuthProvider(
            "https://github.com/login/oauth/authorize",
            Config["Authentication:GitHub:ClientId"] ?? string.Empty,
            "read:user");

        Line = new OAuthProvider(
            "https://access.line.me/oauth2/v2.1/authorize",
            Config["Authentication:Line:ClientId"] ?? string.Empty,
            "profile openid");
    }

    private async Task StartOAuth(OAuthProvider provider)
    {
        var pkce = PkceUtil.Create();
        var state = Guid.NewGuid().ToString("N");
        var redirectUri = Nav.BaseUri.TrimEnd('/') + "/oauth";
        var url = provider.BuildAuthorizeUrl(pkce.CodeChallenge, redirectUri, state);
        await SessionJs.SetItemAsync("pkce_" + state, pkce.CodeVerifier);
        //Console.WriteLine($"OAuth authorize URL:\n{url}");

        Nav.NavigateTo(url, true);
    }


    private record OAuthProvider(string AuthorizeEndpoint, string ClientId, string Scope)
    {
        public string BuildAuthorizeUrl(string challenge, string redirectUri, string state)
        {
            var query = new Dictionary<string, string?>
            {
                ["response_type"] = "code",
                ["client_id"] = ClientId,
                ["redirect_uri"] = redirectUri,
                ["scope"] = Scope,
                ["state"] = state,
                ["code_challenge"] = challenge,
                ["code_challenge_method"] = "S256"
            };
            var encoded = string.Join("&", query.Select(kv => $"{Uri.EscapeDataString(kv.Key)}={Uri.EscapeDataString(kv.Value!)}"));
            return $"{AuthorizeEndpoint}?{encoded}";
        }
    }
}
