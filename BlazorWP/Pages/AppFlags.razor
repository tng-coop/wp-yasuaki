@page "/appflags"
@using BlazorWP.Data
@using Microsoft.AspNetCore.WebUtilities
@inject BlazorWP.Data.AppFlags Flags
@inject NavigationManager Navigation

<PageTitle>App Flags</PageTitle>

<h3>Application Flags</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Feature</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>App Mode</td>
            <td>
                @foreach (AppMode mode in Enum.GetValues<AppMode>())
                {
                    var active = Flags.Mode == mode;
                    var url = BuildUrl("appmode", mode == AppMode.Basic ? "basic" : "full");
                    <a href="@url" class="text-decoration-none" @onclick="() => SetAppMode(mode, url)" @onclick:preventDefault>
                        <span class="badge @(active ? "bg-primary" : "bg-secondary") me-1">@mode</span>
                    </a>
                }
            </td>
        </tr>
        <tr>
            <td>Auth Type</td>
            <td>
                @foreach (AuthType type in Enum.GetValues<AuthType>())
                {
                    var active = Flags.Auth == type;
                    var url = BuildUrl("auth", type == AuthType.Nonce ? "nonce" : "apppass");
                    <a href="@url" class="text-decoration-none" @onclick="() => SetAuth(type, url)" @onclick:preventDefault>
                        <span class="badge @(active ? "bg-primary" : "bg-secondary") me-1">@type</span>
                    </a>
                }
            </td>
        </tr>
        <tr>
            <td>Language</td>
            <td>
                @foreach (Language lang in Enum.GetValues<Language>())
                {
                    var active = Flags.Language == lang;
                    var url = BuildUrl("lang", lang == Language.Japanese ? "jp" : "en");
                    <a href="@url" class="text-decoration-none" @onclick="() => SetLanguage(lang, url)" @onclick:preventDefault>
                        <span class="badge @(active ? "bg-primary" : "bg-secondary") me-1">@lang</span>
                    </a>
                }
            </td>
        </tr>
        <tr>
            <td>WordPress URL</td>
            <td>
                <input class="form-control" @bind="wpUrl" @bind:after="UpdateWpUrl" />
            </td>
        </tr>
    </tbody>
</table>

@code {
    private string wpUrl = string.Empty;

    protected override void OnInitialized()
    {
        wpUrl = Flags.WpUrl;
    }

    private string BuildUrl(string key, string value)
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

        foreach (var kvp in query)
        {
            // Preserve any existing query parameters
            dict[kvp.Key] = kvp.Value.ToString();
        }

        // Always include the current flags so that navigating to the new URL
        // retains the full set of features regardless of the starting query.
        dict["appmode"] = Flags.Mode == AppMode.Basic ? "basic" : "full";
        dict["auth"] = Flags.Auth == AuthType.Nonce ? "nonce" : "apppass";
        dict["lang"] = Flags.Language == Language.Japanese ? "jp" : "en";
        dict["wpurl"] = Flags.WpUrl;

        // Override the flag being changed with the new value.
        dict[key] = value;

        return QueryHelpers.AddQueryString(uri.GetLeftPart(UriPartial.Path), dict);
    }

    private async Task SetAppMode(AppMode mode, string url)
    {
        await Flags.SetAppMode(mode);
        Navigation.NavigateTo(url);
    }

    private async Task SetAuth(AuthType type, string url)
    {
        await Flags.SetAuthMode(type);
        Navigation.NavigateTo(url);
    }

    private async Task SetLanguage(Language lang, string url)
    {
        await Flags.SetLanguage(lang);
        Navigation.NavigateTo(url, forceLoad: true);
    }

    private async Task UpdateWpUrl()
    {
        var url = BuildUrl("wpurl", wpUrl);
        await Flags.SetWpUrl(wpUrl);
        Navigation.NavigateTo(url);
    }
}

