@page "/appflags"
@using Editor.WordPress
@using Microsoft.AspNetCore.WebUtilities
@inject BlazorWP.Data.AppFlags Flags
@inject NavigationManager Navigation
@inject IWordPressApiService Api
@inject AppPasswordService AppPassService
@inject WpNonceJsInterop NonceJs
@implements IDisposable

<PageTitle>App Flags</PageTitle>

<section aria-labelledby="appflags-heading" class="container py-3" data-testid="appflags-page">
    <h3 id="appflags-heading" class="mb-3">Application Flags</h3>

    <div class="alert alert-light border" role="status" aria-live="polite" data-testid="state-panel">
        <div>Mode: <span data-testid="state-mode">@Flags.Mode</span></div>
        <div>Auth: <span data-testid="state-auth">@Flags.Auth</span></div>
        <div>Language: <span data-testid="state-lang">@Flags.Language</span></div>
        <div>WP URL: <span data-testid="state-wpurl">@Flags.WpUrl</span></div>
    </div>

    <table class="table table-striped" data-testid="flags-table">
        <thead>
            <tr>
                <th scope="col">Feature</th>
                <th scope="col">Options</th>
            </tr>
        </thead>
        <tbody>
            <tr data-testid="row-appmode">
                <td><label id="appmode-label">App Mode</label></td>
                <td aria-labelledby="appmode-label">
                    @foreach (AppMode mode in Enum.GetValues<AppMode>())
                    {
                        var active = Flags.Mode == mode;
                        var url = BuildUrl("appmode", mode == AppMode.Basic ? "basic" : "full");
                        <button type="button" class="btn btn-sm me-1 @(active ? "btn-primary" : "btn-outline-secondary")"
                            role="button" aria-pressed="@active" data-testid="@($"appmode-{mode.ToString().ToLower()}")"
                            title="@($"Set App Mode to {mode}")" @onclick="() => SetAppMode(mode, url)">
                            @mode
                        </button>
                    }
                </td>
            </tr>
            <tr data-testid="row-authtype">
                <td><label id="authtype-label">Auth Type</label></td>
                <td aria-labelledby="authtype-label">
                    @foreach (AuthType type in Enum.GetValues<AuthType>())
                    {
                        var active = Flags.Auth == type;
                        var url = BuildUrl("auth", type == AuthType.Nonce ? "nonce" : "apppass");
                        <button type="button" class="btn btn-sm me-1 @(active ? "btn-primary" : "btn-outline-secondary")"
                            role="button" aria-pressed="@active" data-testid="@($"auth-{type.ToString().ToLower()}")"
                            title="@($"Set Auth to {type}")" @onclick="() => SetAuth(type, url)">
                            @type
                        </button>
                    }
                </td>
            </tr>
            <tr data-testid="row-language">
                <td><label id="language-label">Language</label></td>
                <td aria-labelledby="language-label">
                    @foreach (Language lang in Enum.GetValues<Language>())
                    {
                        var active = Flags.Language == lang;
                        var url = BuildUrl("lang", lang == Language.Japanese ? "jp" : "en");
                        <button type="button" class="btn btn-sm me-1 @(active ? "btn-primary" : "btn-outline-secondary")"
                            role="button" aria-pressed="@active" data-testid="@($"lang-{lang.ToString().ToLower()}")"
                            title="@($"Set Language to {lang}")" @onclick="() => SetLanguage(lang, url)">
                            @lang
                        </button>
                    }
                </td>
            </tr>
            <tr data-testid="row-wpurl">
                <td>
                    <label for="wpurl-input">WordPress URL</label>
                </td>
                <td>
                    <form @onsubmit="OnWpUrlSubmit" data-testid="wpurl-form">
                        <div class="input-group">
                            <input id="wpurl-input" class="form-control" placeholder="https://example.com" @bind="wpUrl"
                                @bind:event="oninput" data-testid="wpurl-input" />
                            <button type="submit" class="btn btn-primary" data-testid="wpurl-save">Save</button>
                        </div>
                        <div class="form-text">
                            Value is applied only on <strong>Save</strong> (or pressing <kbd>Enter</kbd>).
                        </div>
                    </form>
                </td>
            </tr>
        </tbody>
    </table>

    <!-- Quick Check -->
    <div class="card mt-4" data-testid="wpdi-card">
        <div class="card-body">
            <h5 class="card-title mb-3">WPDI Quick Check</h5>
            <div class="row g-2 align-items-center mb-2">
                <div class="col-auto">Auth Mode:</div>
                <div class="col-auto"><span class="badge bg-info" data-testid="wpdi-auth">@Flags.Auth</span></div>
            </div>
            <div class="mb-2">
                <strong>Status:</strong>
                <span data-testid="wpdi-status">@(_checkStatus ?? "Idle")</span>
                @if (_httpCode is not null)
                {
                    <span class="text-muted" data-testid="wpdi-code"> (@_httpCode)</span>
                }
                @if (!string.IsNullOrWhiteSpace(_userName))
                {
                    <span class="ms-2" data-testid="wpdi-user">user: @_userName</span>
                }
                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <div class="text-danger small mt-1" data-testid="wpdi-error">@_error</div>
                }
                @if (_lastChecked is not null)
                {
                    <div class="text-muted small" data-testid="wpdi-last">last: @_lastChecked</div>
                }
            </div>
            <button class="btn btn-outline-primary btn-sm" data-testid="wpdi-run" disabled="@_checking"
                @onclick="RunQuickCheck">
                @(_checking ? "Checkingâ€¦" : "Run check")
            </button>
        </div>
    </div>
</section>

<!-- Auth Scenarios Lab -->
<div class="card mt-4" data-testid="authlab-card">
    <div class="card-body">
        <h5 class="card-title mb-3">Auth Scenarios Lab</h5>

        <div class="mb-2 text-muted small">
            Use these controls to simulate / prepare tricky states for tests: missing/invalid App Password,
            or cookie/nonce not ready (use the WP login link + your test fixtures to control cookies).
        </div>

        <div class="row g-2 align-items-end mb-2">
            <div class="col-sm-4">
                <label for="authlab-user" class="form-label">AppPass Username</label>
                <input id="authlab-user" class="form-control" @bind="_appUser" data-testid="authlab-user" />
            </div>
            <div class="col-sm-4">
                <label for="authlab-pass" class="form-label">AppPass Password</label>
                <input id="authlab-pass" type="password" class="form-control" @bind="_appPass"
                    data-testid="authlab-pass" />
            </div>
            <div class="col-sm-4 d-flex gap-2">
                <button class="btn btn-primary" data-testid="authlab-save-valid" @onclick="SaveValidAppPass"
                    disabled="@(_saving)">Save AppPass</button>
                <button class="btn btn-outline-danger" data-testid="authlab-save-invalid" @onclick="SaveInvalidAppPass"
                    disabled="@(_saving)">Save Invalid</button>
                <button class="btn btn-outline-secondary" data-testid="authlab-clear" @onclick="ClearAppPass"
                    disabled="@(_saving)">Clear</button>
            </div>
        </div>

        <div class="d-flex flex-wrap gap-2 mb-2">
            <button class="btn btn-outline-primary btn-sm" data-testid="authlab-open-login" @onclick="OpenWpLogin">Open
                WP Login</button>
            <button class="btn btn-outline-secondary btn-sm" data-testid="authlab-open-admin"
                @onclick="OpenWpAdmin">Open WP Admin</button>
            <button class="btn btn-outline-dark btn-sm" data-testid="authlab-rebuild"
                @onclick="ForceRebuildClient">Force Rebuild Client</button>
        </div>

        <div class="small">
            <div>Creds present: <strong data-testid="authlab-creds-present">@(_credsPresent ? "yes" : "no")</strong>
                @if (_credsPresent)
                {
                    <span class="ms-2 text-muted" data-testid="authlab-creds-mask">(@_credsMask)</span>
                }
            </div>
            <div class="text-muted">Tip: For <em>nonce not ready</em> cases, clear cookies via your test fixture and
                reload this page, then run the WPDI Quick Check above in <strong>Nonce</strong> mode.</div>
            @if (!string.IsNullOrEmpty(_authlabStatus))
            {
                <div class="mt-2" data-testid="authlab-status">@_authlabStatus</div>
            }
        </div>
    </div>
</div>

@code {
    private string wpUrl = string.Empty;

    // --- WPDI Quick Check state ---
    private bool _checking;
    private string? _checkStatus; // Idle | OK | Unauthorized | NotConfigured | Error
    private int? _httpCode;
    private string? _userName;
    private string? _error;
    private DateTimeOffset? _lastChecked;

    // --- AuthLab state ---
    private string _appUser = string.Empty;
    private string _appPass = string.Empty;
    private bool _credsPresent;
    private string _credsMask = string.Empty;
    private bool _saving;
    private string? _authlabStatus;

    protected override void OnInitialized()
    {
        wpUrl = Flags.WpUrl;
        Flags.OnChange += OnFlagsChanged;
        _ = InvokeAsync(async () =>
        {
            await LoadCredsPreview();
            await RunQuickCheck();
        });
    }

    private async Task LoadCredsPreview()
    {
        var creds = await AppPassService.GetAsync();
        _credsPresent = creds.HasValue;
        if (creds.HasValue)
        {
            var (u, p) = (creds.Value.Username ?? "", creds.Value.AppPassword ?? "");
            _appUser = string.IsNullOrEmpty(_appUser) ? u : _appUser;
            _credsMask = string.IsNullOrEmpty(p) ? "(empty)" : (p.Length <= 4 ? new string('*', p.Length) : new string('*', p.Length
            - 4) + p[^4..]);
        }
        else
        {
            _credsMask = string.Empty;
        }
        StateHasChanged();
    }

    private void OnFlagsChanged()
    {
        _ = InvokeAsync(async () => { await RunQuickCheck(); });
        StateHasChanged();
    }

    private string BuildUrl(string key, string value)
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        var dict = new Dictionary<string, string?>(StringComparer.OrdinalIgnoreCase);

        foreach (var kvp in query) dict[kvp.Key] = kvp.Value.ToString();
        dict["appmode"] = Flags.Mode == AppMode.Basic ? "basic" : "full";
        dict["auth"] = Flags.Auth == AuthType.Nonce ? "nonce" : "apppass";
        dict["lang"] = Flags.Language == Language.Japanese ? "jp" : "en";
        dict["wpurl"] = Flags.WpUrl;
        dict[key] = value;
        return QueryHelpers.AddQueryString(uri.GetLeftPart(UriPartial.Path), dict);
    }

    private async Task SetAppMode(AppMode mode, string url)
    {
        await Flags.SetAppMode(mode);
        Navigation.NavigateTo(url);
    }

    private async Task SetAuth(AuthType type, string url)
    {
        await Flags.SetAuthMode(type);
        if (type == AuthType.Nonce)
        {
            Api.SetAuthPreference(WordPressAuthPreference.Nonce(() => NonceJs.GetNonceAsync()));
        }
        else
        {
            var creds = await AppPassService.GetAsync();
            if (creds is { Username: var user, AppPassword: var pass })
            {
                Api.SetAuthPreference(WordPressAuthPreference.AppPassword(user, pass));
            }
            else
            {
                Api.SetAuthPreference(WordPressAuthPreference.None);
            }
        }
        Navigation.NavigateTo(url);
    }

    private async Task SetLanguage(Language lang, string url)
    {
        await Flags.SetLanguage(lang);
        Navigation.NavigateTo(url, forceLoad: true);
    }

    // Apply WP URL only on Save/Enter.
    private async Task OnWpUrlSubmit()
    {
        var url = BuildUrl("wpurl", wpUrl);
        await Flags.SetWpUrl(wpUrl);
        if (!string.IsNullOrWhiteSpace(wpUrl))
        {
            Api.SetEndpoint(wpUrl);
        }
        Navigation.NavigateTo(url);
    }

    private async Task RunQuickCheck()
    {
        _checking = true;
        _checkStatus = "Checking";
        _error = null; _userName = null; _httpCode = null;
        StateHasChanged();

        try
        {
            var client = Api.HttpClient;
            if (client is null)
            {
                await Api.GetClientAsync(); // will SetEndpoint internally using Flags.WpUrl
                client = Api.HttpClient;
            }

            if (client is null) { _checkStatus = "NotConfigured"; return; }

            using var resp = await client.GetAsync("wp/v2/users/me");
            _httpCode = (int)resp.StatusCode;

            if (resp.IsSuccessStatusCode)
            {
                _checkStatus = "OK";
                using var s = await resp.Content.ReadAsStreamAsync();
                using var doc = await System.Text.Json.JsonDocument.ParseAsync(s);
                if (doc.RootElement.TryGetProperty("name", out var nameEl))
                    _userName = nameEl.GetString();
            }
            else if (_httpCode is 401 or 403)
            {
                _checkStatus = "Unauthorized";
            }
            else
            {
                _checkStatus = $"HTTP {_httpCode}";
            }
        }
        catch (Exception ex)
        {
            _checkStatus = "Error";
            _error = ex.Message;
        }
        finally
        {
            _lastChecked = DateTimeOffset.Now;
            _checking = false;
            StateHasChanged();
        }
    }

    private async Task SaveValidAppPass()
    {
        _saving = true; _authlabStatus = null; StateHasChanged();
        try
        {
            if (string.IsNullOrWhiteSpace(_appUser) || string.IsNullOrWhiteSpace(_appPass))
            {
                _authlabStatus = "Enter both username and password.";
                return;
            }
            await AppPassService.SetAsync(_appUser, _appPass);
            _authlabStatus = "Saved App Password.";
            Api.SetAuthPreference(WordPressAuthPreference.AppPassword(_appUser, _appPass));
            await LoadCredsPreview();
            await RunQuickCheck();
        }
        finally { _saving = false; StateHasChanged(); }
    }

    private async Task SaveInvalidAppPass()
    {
        _saving = true; _authlabStatus = null; StateHasChanged();
        try
        {
            if (string.IsNullOrWhiteSpace(_appUser) || string.IsNullOrWhiteSpace(_appPass))
            {
                _authlabStatus = "Enter both username and password (we will store an intentionally wrong one).";
                return;
            }
            var wrong = _appPass + "-wrong";
            await AppPassService.SetAsync(_appUser, wrong);
            _authlabStatus = "Saved intentionally invalid App Password.";
            Api.SetAuthPreference(WordPressAuthPreference.AppPassword(_appUser, wrong));
            await LoadCredsPreview();
            await RunQuickCheck();
        }
        finally { _saving = false; StateHasChanged(); }
    }

    private async Task ClearAppPass()
    {
        _saving = true; _authlabStatus = null; StateHasChanged();
        try
        {
            await AppPassService.ClearAsync();
            _authlabStatus = "Cleared stored App Password.";
            Api.SetAuthPreference(WordPressAuthPreference.None);
            await LoadCredsPreview();
            await RunQuickCheck();
        }
        finally { _saving = false; StateHasChanged(); }
    }

    private void OpenWpLogin()
    {
        var target = string.IsNullOrWhiteSpace(Flags.WpUrl) ? null : Flags.WpUrl.TrimEnd('/') + "/wp-login.php";
        if (!string.IsNullOrEmpty(target)) Navigation.NavigateTo(target, forceLoad: true);
    }

    private void OpenWpAdmin()
    {
        var target = string.IsNullOrWhiteSpace(Flags.WpUrl) ? null : Flags.WpUrl.TrimEnd('/') + "/wp-admin/";
        if (!string.IsNullOrEmpty(target)) Navigation.NavigateTo(target, forceLoad: true);
    }

    private async Task ForceRebuildClient()
    {
        await Api.GetClientAsync(); // trigger lazy init without UI setting endpoint
        await RunQuickCheck();
    }


    public void Dispose() => Flags.OnChange -= OnFlagsChanged;
}