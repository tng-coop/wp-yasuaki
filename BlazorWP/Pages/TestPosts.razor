@page "/test-posts"

@using Editor.Abstractions
@using Editor.WordPress
@inject IPostEditor Editor
@inject IPostFeed Feed
@inject IWordPressApiService Api
@inject NavigationManager Nav

@code {
    private string? Q;
    private string Title = "";
    private string IdText = "";
    private string StatusText = "Ready.";
    private List<UiPost> Items = new();

    private sealed record UiPost(long Id, string Title, string Status);

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var qs = System.Web.HttpUtility.ParseQueryString(uri.Query);
        Q = qs.Get("q");
    }

    private async Task AddAsync()
    {
        try
        {
            var res = await Editor.CreateAsync(Title, "<p>from test-posts</p>");
            StatusText = $"Added draft (Id {res.Id}): {Title}";
        }
        catch (Exception ex)
        {
            StatusText = $"Add failed: {ex.Message}";
        }
    }

    private async Task ListAsync()
    {
        try
        {
            await Feed.RefreshAsync("posts");
            var snap = Feed.Current("posts");

            Items = snap
                .Where(p => !string.Equals(p.Status, "trash", StringComparison.OrdinalIgnoreCase))
                .Where(p => string.IsNullOrEmpty(Q) || (p.Title?.Contains(Q, StringComparison.OrdinalIgnoreCase) ?? false))
                .Select(p => new UiPost(p.Id, p.Title, p.Status))
                .ToList();

            StatusText = $"Listed {Items.Count} items";
        }
        catch (Exception ex)
        {
            StatusText = $"List failed: {ex.Message}";
        }
    }

    private async Task DeleteAsync()
    {
        if (!long.TryParse(IdText, out var id))
        {
            StatusText = "Enter a numeric Id";
            return;
        }

        try
        {
            var wp = await Api.GetClientAsync(); // WpDI’s WordPressPCL client
            if (wp is null) { StatusText = "WordPress client unavailable."; return; }

            var ok = await wp.Posts.DeleteAsync((int)id, force: true);
            StatusText = ok ? "Deleted!" : "Delete failed";
        }
        catch (Exception ex)
        {
            StatusText = $"Delete failed: {ex.Message}";
        }
    }
}

<h3>Test: WordPress Posts</h3>

<div class="space-y-3">
  <div class="flex items-center gap-2">
    <input data-testid="title-input" class="border p-2 rounded w-72" placeholder="Title…" @bind="Title" />
    <input data-testid="id-input" class="border p-2 rounded w-36" placeholder="Id…" @bind="IdText" />
  </div>

  <div class="flex flex-wrap gap-2">
    <button data-testid="btn-add" class="px-3 py-2 border rounded" @onclick="AddAsync">Add Draft</button>
    <button data-testid="btn-list" class="px-3 py-2 border rounded" @onclick="ListAsync">List</button>
    <button data-testid="btn-delete" class="px-3 py-2 border rounded" @onclick="DeleteAsync">Delete by Id</button>
  </div>

  <div role="status" data-testid="status">@StatusText</div>

  <ul data-testid="post-list" class="list-disc pl-6">
    @foreach (var p in Items)
    {
      <li><strong>@p.Id</strong> — @((MarkupString)p.Title) <em>(@p.Status)</em></li>
    }
  </ul>

  @if (!string.IsNullOrEmpty(Q))
  {
    <p class="text-sm opacity-70">Query filter: <code>@Q</code></p>
  }
</div>
