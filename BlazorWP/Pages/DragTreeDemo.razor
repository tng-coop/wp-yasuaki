@page "/drag-tree-demo"
@using BlazorWP.Data
@using PanoramicData.Blazor
@using PanoramicData.Blazor.Arguments
@using PanoramicData.Blazor.Models

<h3>PDTree Drag-and-Drop Demo</h3>
<p class="text-muted">Drag nodes to reorder or move between folders. This sample demonstrates a simple hierarchical structure.</p>

<PDDragContext>
    <PDTree @ref="_tree"
            TItem="TreeItem"
            DataProvider="_dataProvider"
            KeyField="x => x.Id"
            ParentKeyField="x => x.ParentId"
            TextField="x => x.Name"
            IconCssClass="GetIconCssClass"
            AllowDrag="true"
            AllowDrop="true"
            AllowDropInBetween="true"
            Drop="OnDrop"
            Sort="SortNodes"
            ShowLines="true"
            ShowRoot="true"
            Ready="OnReady">
    </PDTree>
</PDDragContext>

@if (actionLogs.Any())
{
    <div class="mt-3">
        <h5>Drag Log</h5>
        <pre class="log-box">@string.Join("\n", actionLogs)</pre>
    </div>
}

@if (treeLines.Any())
{
    <div class="mt-3">
        <h5>Current Tree Order</h5>
        <pre class="log-box">@string.Join("\n", treeLines)</pre>
    </div>
}

@code {
    private PDTree<TreeItem> _tree = null!;
    private readonly TreeDataProvider _dataProvider = new();
    private List<string> actionLogs = new();
    private List<string> treeLines = new();

    private void OnReady()
    {
        _tree.ExpandAll();
        LogTree();
        Log("Tree ready");
    }

    private static string GetIconCssClass(TreeItem item, int _) => item.IsGroup ? "fas fa-fw fa-building" : "fas fa-fw fa-user";

    private async Task OnDrop(DropEventArgs args)
    {
        var targetItem = (args.Target as PanoramicData.Blazor.Models.TreeNode<TreeItem>)?.Data;
        TreeItem? sourceItem = null;
        if (args.Payload is List<TreeItem> items && items.Count > 0)
        {
            sourceItem = items[0];
        }

        if (sourceItem != null && targetItem != null)
        {
            ReOrder(sourceItem, targetItem, args.Before);
            await _tree.RefreshAsync();
            LogTree();
            var position = args.Before == null ? "into" : args.Before.Value ? "before" : "after";
            Log($"Moved '{sourceItem.Name}' {position} '{targetItem.Name}'");
        }
    }

    private static int SortNodes(TreeItem a, TreeItem b)
    {
        if (a.IsGroup != b.IsGroup)
        {
            return a.IsGroup ? 1 : -1;
        }

        return a.Order.CompareTo(b.Order);
    }

    private void ReOrder(TreeItem source, TreeItem target, bool? before)
    {
        if (source.IsGroup)
        {
            if (!target.IsGroup)
            {
                return;
            }
        }
        else if (target.IsGroup && before != null)
        {
            return;
        }

        var sourceNode = _tree.RootNode.Find(source.Id.ToString());
        var targetNode = _tree.RootNode.Find(target.Id.ToString());
        if (sourceNode?.ParentNode?.Nodes is null || targetNode == null)
        {
            return;
        }

        // Handle folder dropped onto folder to make it a child
        if (source.IsGroup && target.IsGroup && before == null)
        {
            var sourceParentNodes = sourceNode.ParentNode.Nodes;
            sourceParentNodes.Remove(sourceNode);
            targetNode.Nodes?.Insert(0, sourceNode);
            sourceNode.ParentNode = targetNode;
            source.ParentId = target.Id;
            ReOrderNodes(sourceParentNodes);
            ReOrderNodes(targetNode.Nodes);
            _ = _dataProvider.UpdateAsync(source, new Dictionary<string, object?> { ["ParentId"] = source.ParentId }, CancellationToken.None);
            return;
        }

        if (targetNode.ParentNode?.Nodes is null)
        {
            return;
        }

        var originalParentNodes = sourceNode.ParentNode.Nodes;
        originalParentNodes.Remove(sourceNode);

        if (source.IsGroup || !target.IsGroup)
        {
            var tIdx = targetNode.ParentNode.Nodes.IndexOf(targetNode);
            targetNode.ParentNode.Nodes.Insert(before == true ? tIdx : tIdx + 1, sourceNode);
            sourceNode.ParentNode = targetNode.ParentNode;
            source.ParentId = (targetNode.ParentNode.Data as TreeItem)?.Id;
            ReOrderNodes(originalParentNodes);
            ReOrderNodes(targetNode.ParentNode.Nodes);
            _ = _dataProvider.UpdateAsync(source, new Dictionary<string, object?> { ["ParentId"] = source.ParentId }, CancellationToken.None);
        }
        else
        {
            targetNode.Nodes?.Insert(0, sourceNode);
            sourceNode.ParentNode = targetNode;
            source.ParentId = target.Id;
            ReOrderNodes(originalParentNodes);
            ReOrderNodes(targetNode.Nodes);
            _ = _dataProvider.UpdateAsync(source, new Dictionary<string, object?> { ["ParentId"] = source.ParentId }, CancellationToken.None);
        }
    }

    private static void ReOrderNodes(IEnumerable<PanoramicData.Blazor.Models.TreeNode<TreeItem>>? nodes)
    {
        if (nodes != null)
        {
            var index = 0;
            foreach (var node in nodes)
            {
                if (node.Data != null)
                {
                    node.Data.Order = ++index;
                }
            }
        }
    }

    private void LogTree()
    {
        if (_tree.RootNode?.Nodes == null)
        {
            return;
        }

        treeLines = SerializeNodes(_tree.RootNode.Nodes, 0).ToList();
        //Console.WriteLine("Current tree order:");
        foreach (var line in treeLines)
        {
            //Console.WriteLine(line);
        }
        InvokeAsync(StateHasChanged);
    }

    private void Log(string message)
    {
        actionLogs.Add(message);
        //Console.WriteLine(message);
        InvokeAsync(StateHasChanged);
    }

    private static IEnumerable<string> SerializeNodes(IEnumerable<PanoramicData.Blazor.Models.TreeNode<TreeItem>> nodes, int level)
    {
        foreach (var node in nodes)
        {
            if (node.Data != null)
            {
                var indent = new string(' ', level * 2);
                yield return $"{indent}{node.Data}";
            }

            if (node.Nodes != null)
            {
                foreach (var child in SerializeNodes(node.Nodes, level + 1))
                {
                    yield return child;
                }
            }
        }
    }

}
